================================================================================
                    RPG SKILL TREE SYSTEM - COMPLETE TECHNICAL DOCUMENTATION
================================================================================

VERSION: 3.0
LAST UPDATED: September 2, 2025
PROJECT TYPE: Web-based RPG Character Management System
TECHNOLOGY STACK: HTML5, CSS3, JavaScript (ES6+), Local Storage

================================================================================
                                TABLE OF CONTENTS
================================================================================

1. SYSTEM OVERVIEW & ARCHITECTURE
2. CHARACTER CREATION & MANAGEMENT
3. RACE SYSTEM DETAILED BREAKDOWN
4. SKILL SYSTEM ARCHITECTURE
5. COMBAT & STATS MECHANICS
6. INVENTORY & EQUIPMENT SYSTEM
7. SHOP & ECONOMY MECHANICS
8. CRAFTING SYSTEM IMPLEMENTATION
9. MONSTER SYSTEM & AI OPPONENTS
10. STATUS EFFECTS & BUFFS/DEBUFFS
11. USER INTERFACE & NAVIGATION
12. DATA PERSISTENCE & STORAGE
13. DEVELOPER MODE & DEBUGGING TOOLS
14. NOTES SYSTEM & USER EXPERIENCE
15. TECHNICAL IMPLEMENTATION DETAILS
16. FILE STRUCTURE & CODE ORGANIZATION
17. BALANCE MECHANICS & GAME THEORY
18. EXTENSIBILITY & FUTURE DEVELOPMENT

================================================================================
                         1. SYSTEM OVERVIEW & ARCHITECTURE
================================================================================

PURPOSE & DESIGN PHILOSOPHY
----------------------------
The RPG Skill Tree System is a comprehensive web-based character management 
application designed for tabletop RPG campaigns. The system emphasizes:

- Character progression through skill-based advancement
- Racial diversity with meaningful mechanical differences
- Dual resource management: Lumens for skills, Gil for equipment
- Massive equipment catalog with 364+ unique items
- Equipment crafting and enhancement
- Monster creation and management tools
- Campaign note-taking and organization
- Simple, intuitive Gil currency system (Final Fantasy inspired)

CORE ARCHITECTURE PRINCIPLES
-----------------------------
1. **Client-Side Only**: No server required - runs entirely in browser
2. **Local Storage Persistence**: All data saved to browser's localStorage
3. **Modular Design**: Separate files for different system components
4. **Event-Driven UI**: Reactive interface with real-time updates
5. **Extensible Framework**: Easy to add new races, skills, and items

TECHNICAL STACK
---------------
- **Frontend**: Vanilla HTML5, CSS3, JavaScript ES6+
- **Storage**: Browser localStorage API
- **Icons**: Custom icon mapping system with PNG assets
- **Styling**: CSS Grid/Flexbox with dark theme
- **Architecture**: Object-oriented JavaScript with class inheritance

MAIN SYSTEM COMPONENTS
----------------------
1. **Character Manager** (character-manager.js): Core character logic and toggle skill management
2. **UI Components** (ui-components.js): Interface rendering and interaction
3. **Skills Data** (skills-data.js): Skill definitions and searching with new tiered pricing
4. **Races Data** (races-data.js): Race definitions and racial skills
5. **Items Data** (items-data.js): Equipment and inventory items
6. **Game Logic** (game-logic.js): Combat calculations and new tiered stat pricing
7. **Monster System** (monster-system.js): AI opponent management
8. **Monster Loot System** (monster-loot-system.js): Dynamic loot generation based on monster level and skills
9. **Toggle Skill System** (toggle-skill-system.js): Stamina-based toggle skills with activation and maintenance costs
10. **Status Effects** (status-effects.js): Buff/debuff system

DATA FLOW ARCHITECTURE
-----------------------
1. **User Input** → UI Components → Character Manager → Data Storage
2. **Data Retrieval** → localStorage → Character Manager → UI Rendering
3. **Calculations** → Game Logic → Character Manager → UI Update
4. **Persistence** → Character Manager → localStorage → Browser Storage

The system uses a centralized character manager that coordinates between
all subsystems, ensuring data consistency and proper event handling.

================================================================================
                        2. CHARACTER CREATION & MANAGEMENT
================================================================================

CHARACTER DATA STRUCTURE
-------------------------
Each character is stored as a JavaScript object with the following structure:

```javascript
character = {
    // Basic Identity
    id: "unique_identifier_string",
    name: "Character Name",
    folder: "Optional Organization Folder",
    
    // Core Attributes  
    race: "race_id", // elf, dwarf, human, orc, dragonborn, halfling, tiefling, drow, gnoll
    isMonster: false, // true for NPCs/enemies
    
    // Statistics
    stats: {
        hp: 10,           // Health Points
        stamina: 10,      // Stamina for special abilities
        strength: 5,      // Physical power
        magicPower: 5,    // Magical ability
        accuracy: 5       // Precision and skill
    },
    
    // Resources
    lumens: 150,           // Skill currency
    gil: 65,               // Equipment currency (Final Fantasy inspired)
    
    // Skills & Progression
    unlockedSkills: {
        weapons: {
            swords: ["sword_mastery", "power_strike"],
            bows: ["archery_basics"]
        },
        magic: {
            elemental: ["fire_bolt", "ice_shard"],
            divine: ["heal", "bless"]
        },
        professions: {
            smithing: ["basic_smithing"],
            alchemy: ["herb_gathering"]
        },
        racial: {
            elf: ["elven_accuracy", "forest_step"]
        }
    },
    
    // Racial Abilities
    racialAbilities: {
        versatileLearning: true,        // Human trait
        ambitiousSpirit: true,          // Human trait  
        crossCulturalLearning: true,    // Human trait
        draconicElement: "fire"         // Dragonborn trait
    },
    
    racialPassiveTraits: [
        "Versatile Learning: Free Tier 1 weapon skill",
        "Ambitious Spirit: 10% more Lumens"
    ],
    
    // Equipment
    equipment: {
        weapon: "iron_sword_id",
        secondaryWeapon: null,
        armor: {
            head: "leather_helm_id",
            chest: "chainmail_id", 
            legs: "leather_pants_id",
            feet: "leather_boots_id"
        },
        accessories: {
            ring1: null,
            ring2: null,
            amulet: "protection_amulet_id"
        }
    },
    
    // Inventory
    inventory: [
        {
            id: "healing_potion",
            quantity: 3,
            equipped: false
        }
    ],
    
    // Status Effects
    statusEffects: [
        {
            id: "blessed",
            duration: 5,
            source: "divine_magic"
        }
    ],
    
    // User Notes
    notes: "Character backstory and campaign notes...",
    
    // Metadata
    createdAt: "2025-08-13T10:30:00Z",
    lastPlayed: "2025-08-13T15:45:00Z"
}
```

CHARACTER CREATION PROCESS
---------------------------
1. **Name Selection**: Player enters character name and optional folder
2. **Race Selection**: Choose from 9 available races, each with unique traits
3. **Automatic Setup**: Character starts with fixed base stats (-3 for combat stats, 10 for HP/Stamina)
4. **Starting Resources**: Begin with 150 Lumens and 65 Gil
5. **Racial Setup**: Apply racial bonuses and unlock starting abilities
6. **Validation**: Ensure character meets minimum requirements
7. **Storage**: Save to localStorage with unique ID

STAT PROGRESSION SYSTEM
------------------------
Unlike traditional RPGs with point allocation during creation, this system uses:
- **Fixed Starting Values**: All characters begin with the same base stats
- **Racial Differentiation**: Races provide bonuses to specific stats
- **Gameplay Progression**: Stats improve through gameplay, purchases, and equipment
- **Equipment Bonuses**: Gear provides significant stat improvements
- **Milestone Rewards**: Special bonuses at certain achievement levels (HP milestones)

RACIAL BONUSES APPLICATION
---------------------------
Applied during character creation:
- **Stat Modifiers**: Direct bonuses to base statistics
- **Passive Traits**: Always-active abilities
- **Exclusive Skills**: Access to race-specific skill trees
- **Starting Equipment**: Some races get bonus starting gear
- **Special Abilities**: Unique mechanics like elemental affinities

CHARACTER VALIDATION
---------------------
Before finalizing character creation:
1. Name must be non-empty and unique within folder
2. Race must be selected from valid options
3. Stats must meet minimum/maximum requirements  
4. Total stat points must equal allocation limit
5. No duplicate IDs in the character database

FOLDER ORGANIZATION
-------------------
Characters can be organized into folders for:
- **Campaign Separation**: Different games or time periods
- **Character Types**: PCs vs NPCs vs Monsters
- **Player Organization**: Multiple characters per player
- **Archive Management**: Retired or backup characters

Folders are created dynamically and support:
- Nested organization (folders within folders)
- Character migration between folders
- Bulk operations on folder contents
- Folder deletion with character preservation

================================================================================
                        3. RACE SYSTEM DETAILED BREAKDOWN
================================================================================

RACIAL DESIGN PHILOSOPHY
-------------------------
Each race provides distinct mechanical advantages and thematic identity:
- **Meaningful Differentiation**: No race is strictly better/worse
- **Thematic Consistency**: Abilities match lore and fantasy tropes
- **Mechanical Balance**: Different strengths for different playstyles
- **Progression Uniqueness**: Exclusive access to certain skill trees

RACE OVERVIEW TABLE
-------------------
| Race      | Primary Focus | Stat Bonuses              | Unique Feature          |
|-----------|---------------|----------------------------|------------------------|
| Human     | Versatility   | +1 HP, +1 Stamina, +1 Acc | Cross-Cultural Learning|
| Elf       | Magic/Precision| +1 Magic Power, +1 Accuracy| Magical Affinity       |
| Dwarf     | Durability    | +2 Physical Defence, +1 HP| Master Craftsman       |
| Orc       | Combat        | +2 Strength, +1 HP        | Savage Critical        |
| Dragonborn| Magic         | +2 Magic Power             | Elemental Affinity     |
| Halfling  | Luck/Speed    | +2 Speed, +1 Accuracy      | Lucky Dodge            |
| Tiefling  | Dark Magic    | +2 Magic Power             | Infernal Heritage      |
| Drow      | Stealth       | +2 Accuracy                | Darkness Mastery       |
| Gnoll     | Pack Hunting  | +2 Strength                | Pack Hunter            |

DETAILED RACE DESCRIPTIONS
---------------------------

**HUMAN - THE ADAPTABLE**
- **Core Philosophy**: Jack-of-all-trades with learning advantages
- **Stat Bonuses**: 
  - +1 HP, +1 Stamina, +1 Accuracy
- **Racial Abilities**:
  - Versatile Learning: Gain one free Tier 1 weapon skill upon character creation
  - Ambitious Spirit: Earn 10% more Lumens from all sources
  - Cross-Cultural Learning: Can learn Tier 1 skills from other races' skill trees
- **Starting Skills**: Human Determination (Tier 1 foundation skill)
- **Passive Traits**: 
  - "Versatile Learning: Free Tier 1 weapon skill at character creation"
  - "Ambitious Spirit: 10% more Lumens from all activities"
  - "Cross-Cultural Learning: Access to other racial Tier 1 skills"
- **Exclusive Skills**: Human Determination tree (leadership and adaptability)
- **Balance Note**: Limited to single racial skill to balance cross-cultural learning

**ELF - THE PRECISE**
- **Core Philosophy**: Masters of magic and nature with keen senses
- **Stat Bonuses**: +1 Magic Power, +1 Accuracy
- **Racial Abilities**:
  - Keen Senses: +1 Accuracy for detecting hidden enemies and precise attacks
  - Magical Affinity: +1 Magic Power when using staves or wands
  - Elven Longevity: Immune to aging and disease status effects
- **Starting Skills**: Elven racial skills
- **Passive Traits**:
  - "Keen Senses: Enhanced detection and precision"
  - "Magical Affinity: Bonus magic power with magical weapons"
  - "Elven Longevity: Immunity to aging effects"
- **Exclusive Skills**: Elven accuracy, forest step, moonbeam, high magic, starlight mastery
- **Preferred Weapons**: Bows, Staves, Rapiers

**DWARF - THE RESILIENT**
- **Core Philosophy**: Tough warriors and master craftsmen
- **Stat Bonuses**: +2 HP, +1 Strength
- **Racial Abilities**:
  - Mountain Resilience: Reduced damage from physical attacks
  - Dwarven Craftsmanship: Bonus to all crafting rolls
- **Starting Skills**: Stone Sense, Dwarven Smithing
- **Passive Traits**:
  - "Mountain Resilience: 10% less physical damage taken"
  - "Dwarven Craftsmanship: +2 bonus to crafting rolls"
- **Exclusive Skills**: Dwarven smithing and engineering trees
- **Preferred Weapons**: Axes, Hammers, Crossbows

**ORC - THE SAVAGE**
- **Core Philosophy**: Brutal warriors focused on raw power
- **Stat Bonuses**: +2 Strength  
- **Racial Abilities**:
  - Savage Strikes: Chance for brutal critical hits
  - Battle Frenzy: Damage increases as HP decreases
- **Starting Skills**: Orcish Fury, Intimidation
- **Passive Traits**:
  - "Savage Strikes: 20% chance for devastating critical hits"
  - "Battle Frenzy: +1 damage per 2 HP lost"
- **Exclusive Skills**: Berserker and intimidation trees
- **Preferred Weapons**: Two-handed weapons, Clubs, Throwing axes

**DRAGONBORN - THE ELEMENTAL**
- **Core Philosophy**: Magical beings with elemental mastery
- **Stat Bonuses**: +2 Magic Power
- **Racial Abilities**:
  - Draconic Element: Choose from 8 elements (Fire, Ice, Lightning, 
    Earth, Wind, Water, Darkness, Light)
  - Breath Weapon: Elemental area attack based on chosen element
  - Scale Armor: Natural armor bonus
- **Starting Skills**: Draconic Heritage, Elemental Attunement
- **Passive Traits**:
  - "Draconic Element: Mastery over chosen elemental force"
  - "Scale Armor: +2 natural armor bonus"
- **Exclusive Skills**: Elemental mastery trees for chosen element
- **Preferred Weapons**: Staves, Elemental weapons, Claws

**HALFLING - THE FORTUNATE**
- **Core Philosophy**: Lucky and nimble, masters of opportunity
- **Stat Bonuses**: +1 to all stats (HP, Stamina, Strength, Magic Power, Accuracy)
- **Racial Abilities**:
  - Lucky Charm: Reroll failed dice once per encounter
  - Small Size: Harder to hit, bonus to stealth
- **Starting Skills**: Halfling Luck, Nimble Dodge
- **Passive Traits**:
  - "Lucky Charm: Reroll one failed roll per combat"
  - "Small Size: +2 dodge bonus, +3 stealth bonus"
- **Exclusive Skills**: Luck manipulation and stealth trees
- **Preferred Weapons**: Small weapons, Slings, Daggers

**TIEFLING - THE INFERNAL**
- **Core Philosophy**: Dark magic wielders with fiendish heritage
- **Stat Bonuses**: +2 Magic Power
- **Racial Abilities**:
  - Infernal Heritage: Resistance to fire and dark magic
  - Devil's Charm: Social manipulation bonuses
- **Starting Skills**: Infernal Magic, Dark Charm
- **Passive Traits**:
  - "Infernal Heritage: 50% resistance to fire and dark damage"
  - "Devil's Charm: +3 bonus to persuasion and deception"
- **Exclusive Skills**: Dark magic and manipulation trees
- **Preferred Weapons**: Pact weapons, Staves, Ritual daggers

**DROW - THE SHADOW**
- **Core Philosophy**: Underground masters of stealth and dark magic
- **Stat Bonuses**: +2 Accuracy
- **Racial Abilities**:
  - Darkness Mastery: See and fight in complete darkness
  - Spider Climb: Scale walls and ceilings
- **Starting Skills**: Darkvision, Web Walking
- **Passive Traits**:
  - "Darkness Mastery: No penalties in darkness, +4 stealth in shadows"
  - "Spider Climb: Move on walls and ceilings at half speed"
- **Exclusive Skills**: Shadow magic and underground survival trees
- **Preferred Weapons**: Rapiers, Hand crossbows, Poison weapons

**GNOLL - THE PACK HUNTER**
- **Core Philosophy**: Ferocious pack fighters with bestial instincts
- **Stat Bonuses**: +2 Strength
- **Racial Abilities**:
  - Pack Hunter: Damage bonus when fighting alongside allies
  - Keen Scent: Track enemies and detect hidden threats
- **Starting Skills**: Pack Tactics, Scent Trail
- **Passive Traits**:
  - "Pack Hunter: +2 damage per adjacent ally in combat"
  - "Keen Scent: Automatically detect hidden enemies within 30 feet"
- **Exclusive Skills**: Pack coordination and hunting trees
- **Preferred Weapons**: Spears, Javelins, Natural weapons

RACIAL PROGRESSION MECHANICS
-----------------------------
1. **Starting Skills**: Each race begins with 2-3 racial skills unlocked
2. **Exclusive Trees**: Access to skills unavailable to other races
3. **Stat Synergy**: Racial bonuses complement racial skill focus
4. **Cross-Cultural Learning**: Only humans can learn from other racial trees
5. **Elemental Choice**: Dragonborn select permanent elemental affinity
6. **Progressive Unlock**: Higher tier racial skills require previous tiers

ELEMENTAL SYSTEM (DRAGONBORN)
------------------------------
Eight elemental affinities available:
1. **Fire**: Damage over time, area effects
2. **Ice**: Slowing effects, defensive barriers  
3. **Lightning**: Chain damage, stunning effects
4. **Earth**: Protection, area control
5. **Wind**: Movement, ranged enhancement
6. **Water**: Healing, cleansing effects
7. **Darkness**: Stealth, fear effects
8. **Light**: Healing, undead damage

Each element provides:
- Unique breath weapon mechanics
- Elemental resistance (50% to chosen element)
- Access to element-specific skill tree
- Thematic spell effects and abilities
- Icon representation in character display

BALANCE CONSIDERATIONS
----------------------
- **No Strictly Superior Race**: Each excels in different areas
- **Trade-offs**: Bonuses in one area offset by limitations in others
- **Playstyle Variety**: Different races encourage different strategies
- **Scaling Balance**: Racial advantages remain relevant at all levels
- **Cross-Cultural Limitation**: Humans trade focused power for versatility

================================================================================
                         4. SKILL SYSTEM ARCHITECTURE
================================================================================

SKILL SYSTEM OVERVIEW
----------------------
The skill system forms the core progression mechanism, organized into:
- **Hierarchical Trees**: Skills unlock in tiers (0-5)
- **Category Organization**: Weapons, Magic, Professions, Racial, Toggle Skills
- **Lumen Economy**: Skills cost Lumens to unlock with new tiered pricing
- **Prerequisite Chains**: Higher skills require lower tier skills
- **Cross-Category Synergy**: Skills from different trees interact
- **Toggle Skills**: Stamina-based skills with activation and maintenance costs

SKILL CATEGORIES & STRUCTURE
-----------------------------

**WEAPON SKILLS**
Primary combat abilities organized by weapon type:

*Sword Skills:*
- Tier 0: Sword Beginner (3 Lumens) - Basic sword proficiency
- Tier 1: Sword Basics (8 Lumens) - Enhanced sword techniques
- Tier 2: Power Strike (15 Lumens) - Enhanced damage attack
- Tier 3: Blade Mastery (25 Lumens) - Advanced sword techniques
- Tier 4: Master Parry (35 Lumens) - Reflect melee attacks back at attacker
- Tier 4: Whirlwind Strike (35 Lumens) - Spinning attack hits all enemies within 10ft
- Tier 4: Piercing Thrust (35 Lumens) - Ignores armor completely, critical hit on 17-20
- Tier 5: Sword Mastery (50 Lumens) - Passive: +3 damage with all sword attacks, critical hits restore 5 stamina

*Bow Skills:*
- Tier 0: Bow Beginner (3 Lumens) - Basic bow proficiency
- Tier 1: Archery Basics (8 Lumens) - Enhanced bow techniques
- Tier 2: Precise Shot (15 Lumens) - Increased accuracy
- Tier 3: Multi-Shot (25 Lumens) - Attack multiple targets
- Tier 4: Projectile Barrage (35 Lumens) - Rain projectiles over 20ft radius area
- Tier 4: Homing Shot (35 Lumens) - Magical projectile that automatically hits target
- Tier 4: Rapid Fire (35 Lumens) - Fire 4 projectiles in rapid succession
- Tier 4: Siege Shot (35 Lumens) - Massive projectile pierces through multiple enemies
- Tier 5: Bow Mastery (50 Lumens) - Passive: +50% range, +3 damage with all bow attacks, critical hits apply additional 2 damage dice

*Staff Skills:*
- Tier 0: Staff Beginner (3 Lumens) - Basic staff combat
- Tier 1: Staff Wielding (8 Lumens) - Enhanced staff techniques
- Tier 2: Arcane Focus (15 Lumens) - Magic power enhancement
- Tier 2: Frost Staff (15 Lumens) - Toggle: Ice enchantment (2 stamina/turn)
- Tier 2: Fire Staff (15 Lumens) - Toggle: Fire enchantment (2 stamina/turn)
- Tier 3: Staff Mastery (25 Lumens) - Advanced magical combat
- Tier 4: Arcane Mastery (35 Lumens) - Passive: All spells cost -1 stamina (minimum 1)
- Tier 4: Staff of Power (35 Lumens) - 2-turn charge and unleash stored energy
- Tier 4: Reality Tear (35 Lumens) - Create dimensional rift for teleportation
- Tier 5: Staff Mastery (50 Lumens) - Passive: +4 magic power, can cast two spells per turn

*Axe Skills:*
- Tier 0: Axe Beginner (3 Lumens) - Basic axe combat
- Tier 1: Axe Proficiency (8 Lumens) - Enhanced axe techniques
- Tier 2: Cleave (15 Lumens) - Hit multiple adjacent enemies
- Tier 2: Ricochet Axe (25 Lumens) - Toggle: Bouncing thrown axes (3 stamina/turn)
- Tier 3: Berserker Rage (25 Lumens) - Toggle: Combat frenzy (2 stamina/turn)
- Tier 4: Earthquake Slam (35 Lumens) - Ground slam in 20ft radius, knockdown + damage
- Tier 4: Whirling Axes (35 Lumens) - Spin attack hits all enemies within 10ft
- Tier 4: Axe Storm (35 Lumens) - Throw up to 6 axes in all directions
- Tier 5: Axe Mastery (50 Lumens) - Passive: +3 damage with all axe attacks, all axe attacks have additional 25% Incapacitated chance, critical hits restore 3 stamina

*Dagger Skills:*
- Tier 0: Dagger Beginner (3 Lumens) - Basic dagger combat
- Tier 1: Dagger Basics (8 Lumens) - Enhanced dagger techniques
- Tier 2: Backstab (15 Lumens) - Sneak attack bonus
- Tier 2: Poison Blade (15 Lumens) - Toggle: Poison coating (2 stamina/turn)
- Tier 3: Dual Wielding (25 Lumens) - Two-weapon fighting
- Tier 4: Thousand Cuts (35 Lumens) - Unleash 8 strikes in blur of motion (auto-hit)
- Tier 4: Shadow Clone (35 Lumens) - Create mirror image that fights alongside you
- Tier 4: Assassinate (35 Lumens) - Instant kill on critical hit (works on most enemies)
- Tier 5: Dagger Mastery (50 Lumens) - Passive: +2 speed, +3 damage, all attacks have 25% critical chance

*Hammer Skills:*
- Tier 0: Hammer Beginner (3 Lumens) - Basic hammer combat
- Tier 1: Hammer Training (8 Lumens) - Enhanced hammer techniques
- Tier 2: Crushing Blow (15 Lumens) - Armor-piercing attack
- Tier 3: Earthquake Strike (25 Lumens) - Area ground slam
- Tier 4: Mjolnir Strike (35 Lumens) - Hammer returns after thrown (60ft range, pierces through)
- Tier 4: Apocalypse Slam (35 Lumens) - Devastating area attack (40ft radius, 4d6 damage)
- Tier 4: Fortress Buster (35 Lumens) - Destroy any structure or barrier
- Tier 5: Hammer Mastery (50 Lumens) - Passive: +4 damage, all attacks cause knockdown, immune to Incapacitated

**MAGIC SKILLS**
Supernatural abilities divided by school:

*Elemental Magic:*
- Tier 1: Fire Bolt (8 Lumens) - Basic fire attack
- Tier 1: Ice Shard (8 Lumens) - Basic ice attack
- Tier 1: Lightning Strike (8 Lumens) - Basic lightning attack
- Tier 2: Fireball (15 Lumens) - Area fire damage
- Tier 2: Ice Armor (15 Lumens) - Defensive ice barrier
- Tier 2: Chain Lightning (15 Lumens) - Multi-target lightning
- Tier 3: Meteor (25 Lumens) - Massive fire area attack
- Tier 3: Blizzard (25 Lumens) - Area ice damage over time
- Tier 3: Thunder Storm (25 Lumens) - Sustained lightning area
- Tier 4: Meteor (35 Lumens) - Devastating overhead attack (6d6 fire damage, 20ft radius)
- Tier 4: Inferno (35 Lumens) - Set 100ft radius ablaze (2d6/turn for 1 minute)
- Tier 4: Fire Tornado (35 Lumens) - Moving 30ft tall fire column (4d6 damage)
- Tier 4: Absolute Zero (35 Lumens) - Instantly freeze any target (no save, 3 turns)
- Tier 4: Ice Age (35 Lumens) - Freeze 200ft radius (1d6 cold/turn, all slowed)
- Tier 4: Glacier (35 Lumens) - Massive 50ft ice wall that moves 20ft/turn
- Tier 4: Lightning Storm (35 Lumens) - 8 random lightning strikes in 50ft radius (3d6 each)
- Tier 4: Ball Lightning (35 Lumens) - Slow orb (20ft/turn) explodes for 4d6 in 15ft radius
- Tier 4: EMP (35 Lumens) - 40ft radius disables all magic for 1 minute
- Tier 5: Fire Supremacy (50 Lumens) - Become one with fire for 3 rounds (immunity, +50% damage)
- Tier 5: Ice Supremacy (50 Lumens) - Become one with ice for 3 rounds (immunity, +50% damage)
- Tier 5: Lightning Supremacy (50 Lumens) - Become one with lightning for 3 rounds (immunity, +50% damage)

*Divine Magic:*
- Tier 1: Heal (8 Lumens) - Basic health restoration
- Tier 1: Bless (8 Lumens) - Temporary stat bonus
- Tier 2: Greater Heal (15 Lumens) - Enhanced healing
- Tier 2: Divine Shield (15 Lumens) - Magical protection
- Tier 3: Resurrection (25 Lumens) - Revive fallen allies
- Tier 3: Divine Intervention (25 Lumens) - Powerful protection
- Tier 4: Resurrection (35 Lumens) - Bring ally back to life (once per day)
- Tier 4: Solar Flare (35 Lumens) - 40ft radius explosion (5d6 radiant damage)
- Tier 4: Divine Judgment (35 Lumens) - Target takes damage equal to their max HP × 0.5
- Tier 5: Light Mastery (50 Lumens) - Become one with light for 3 rounds (immunity, +50% damage)

*Nature Magic:*
- Tier 1: Thorn Whip (8 Lumens) - Ranged nature attack
- Tier 1: Bark Skin (8 Lumens) - Natural armor enhancement
- Tier 2: Entangle (15 Lumens) - Root-based crowd control
- Tier 2: Animal Companion (15 Lumens) - Summon animal ally
- Tier 3: Forest Guardian (25 Lumens) - Summon nature protector
- Tier 4: Mountain Crush (35 Lumens) - Massive boulder falls from sky (5d6 in 20ft radius)
- Tier 4: Petrify (35 Lumens) - Apply Immobilized (cannot move but can attack + +5 AC for 3 turns)
- Tier 4: Tectonic Shift (35 Lumens) - Reshape 100ft area terrain for 24 hours
- Tier 4: Hurricane (35 Lumens) - Massive storm 50ft radius (4d6 damage, difficult terrain)
- Tier 4: Wind Prison (35 Lumens) - Trap target in air pocket (cannot move or act)
- Tier 4: Atmospheric Control (35 Lumens) - Control weather in the area for 1 hour
- Tier 4: Maelstrom (35 Lumens) - 40ft whirlpool pulls enemies in (4d4 damage/turn)
- Tier 4: Blood Boil (35 Lumens) - Superheat target's blood (5d4 damage, no save)
- Tier 4: Tsunami (35 Lumens) - Massive wave 100ft long (6d4 damage, reshape terrain)
- Tier 5: Earth Supremacy (50 Lumens) - Become one with earth for 3 rounds (immunity, +50% damage)
- Tier 5: Wind Mastery (50 Lumens) - Become one with the wind for 3 rounds (flight, immunity)
- Tier 5: Water Mastery (50 Lumens) - Become one with water for 3 rounds (immunity, +50% damage)

*Dark Magic:*
- Tier 1: Shadow Bolt (8 Lumens) - Basic dark attack
- Tier 1: Fear (8 Lumens) - Cause terror in enemies
- Tier 2: Life Drain (15 Lumens) - Steal enemy health
- Tier 2: Darkness (15 Lumens) - Create area of darkness
- Tier 3: Death Ray (25 Lumens) - Instant kill attempt
- Tier 3: Summon Undead (25 Lumens) - Raise skeleton ally
- Tier 4: Void Prison (35 Lumens) - Banish target to shadow realm (removed for 3 turns)
- Tier 4: Soul Steal (35 Lumens) - Drain 1 point from all target stats for 24 hours
- Tier 4: Eclipse (35 Lumens) - 200ft radius darkness, all enemies take 1d6/turn
- Tier 5: Darkness Mastery (50 Lumens) - Become one with darkness for 3 rounds (immunity, +50% damage)

**PROFESSION SKILLS**
Crafting and utility abilities:

*Smithing:*
- Tier 1: Basic Smithing (8 Lumens) - Craft basic metal items
- Tier 2: Advanced Smithing (15 Lumens) - Craft enhanced equipment
- Tier 3: Master Smithing (25 Lumens) - Craft legendary items
- Tier 4: Legendary Smithing (35 Lumens) - Craft artifacts and unique items
- Tier 5: Divine Smithing (50 Lumens) - Craft divine and mythical equipment

*Alchemy:*
- Tier 1: Herb Gathering (8 Lumens) - Find and identify plants
- Tier 2: Potion Brewing (15 Lumens) - Create magical potions
- Tier 3: Master Alchemy (25 Lumens) - Create powerful elixirs
- Tier 4: Legendary Alchemy (35 Lumens) - Create mythical potions and elixirs
- Tier 5: Divine Alchemy (50 Lumens) - Create divine and reality-altering concoctions

*Enchanting:*
- Tier 1: Basic Enchanting (6 Lumens) - Add minor magic to items
- Tier 2: Advanced Enchanting (12 Lumens) - Powerful enchantments
- Tier 3: Artifact Creation (24 Lumens) - Create unique magic items
- Tier 4: Legendary Enchanting (35 Lumens) - Create mythical and legendary artifacts
- Tier 5: Divine Enchanting (50 Lumens) - Create divine and reality-altering artifacts

*Cooking:*
- Tier 1: Field Cooking (6 Lumens) - Prepare beneficial meals
- Tier 2: Gourmet Cooking (12 Lumens) - Create stat-boosting food
- Tier 3: Magical Cuisine (24 Lumens) - Food with magical effects
- Tier 4: Legendary Cooking (35 Lumens) - Create mythical and legendary feasts
- Tier 5: Divine Cooking (50 Lumens) - Create divine and reality-altering cuisine

**RACIAL SKILLS**
Unique abilities tied to character race:

*Human Skills:*
- Tier 1: Human Determination (5 Lumens) - Foundation skill for cross-cultural learning
- Note: Humans can learn Tier 1 skills from other racial trees after unlocking this

*Elf Skills:*
- Tier 1: Elven Sight (7 Lumens) - Enhanced perception
- Tier 1: Forest Knowledge (7 Lumens) - Nature expertise
- Tier 2: Elven Grace (14 Lumens) - Enhanced agility
- Tier 3: Timeless Wisdom (21 Lumens) - Ancient knowledge access
- Tier 4: Elven Supremacy (35 Lumens) - Ultimate elven abilities and mastery
- Tier 5: Elven Ascension (50 Lumens) - Transcendent elven powers

*Dwarf Skills:*
- Tier 1: Stone Sense (7 Lumens) - Detect underground features
- Tier 1: Dwarven Smithing (7 Lumens) - Superior metalworking
- Tier 2: Mountain Resilience (14 Lumens) - Environmental adaptation
- Tier 3: Forge Master (21 Lumens) - Legendary crafting ability
- Tier 4: Dwarven Supremacy (35 Lumens) - Ultimate dwarven abilities and mastery
- Tier 5: Dwarven Ascension (50 Lumens) - Transcendent dwarven powers

*[Additional racial skill trees for Orc, Dragonborn, Halfling, Tiefling, Drow, Gnoll...]*

SKILL UNLOCK MECHANICS
-----------------------

**Prerequisites System:**
1. **Tier Gating**: Must complete previous tier before advancing
2. **Category Requirements**: Some skills require skills from other categories
3. **Racial Restrictions**: Racial skills limited to specific races (except humans)
4. **Lumen Costs**: All skills require Lumen payment to unlock
5. **Equipment Dependencies**: Some skills require specific weapon types

**Lumen Economy:**
- **Tier 0 Skills**: 3 Lumens (weapon basics and core proficiencies)
- **Tier 1 Skills**: 8 Lumens (basic combat skills)
- **Tier 2 Skills**: 15 Lumens (intermediate combat skills)
- **Tier 3 Skills**: 25 Lumens (advanced combat skills)
- **Tier 4 Skills**: 35 Lumens (expert-level skills)
- **Tier 5 Skills**: 50 Lumens (master-level skills)

**Cross-Cultural Learning (Humans Only):**
1. Must first unlock "Human Determination" (5 Lumens)
2. Can then purchase Tier 1 skills from any racial tree
3. Cannot advance beyond Tier 1 in non-human racial trees
4. Costs standard Lumen price for racial skills
5. Maintains racial identity while gaining cultural knowledge

SKILL SEARCH & DISCOVERY
-------------------------
**Search System Features:**
- **Text Search**: Find skills by name or description
- **Category Filtering**: Limit search to specific skill types
- **Tier Filtering**: Show only skills of specific tiers
- **Availability Filtering**: Show only learnable skills
- **Prerequisite Display**: See what's needed to unlock skills

**Search Algorithm:**
```javascript
function searchSkills(query, filters) {
    // Search through all skill categories
    // Match against skill names and descriptions
    // Apply category and tier filters
    // Check character prerequisites
    // Return sorted results by relevance
}
```

SKILL INTERACTION SYSTEMS
--------------------------

**Synergy Effects:**
- **Weapon + Magic**: Enchanted weapon attacks
- **Profession + Combat**: Crafted equipment bonuses
- **Racial + Universal**: Cultural approach to common skills
- **Multi-School Magic**: Combined spell effects

**Skill Progression Tracking:**
- **Unlock History**: Track when skills were learned
- **Usage Statistics**: Monitor skill effectiveness
- **Mastery Levels**: Skills improve with use
- **Synergy Discovery**: Unlock hidden combinations

**Balance Mechanisms:**
- **Increasing Costs**: Higher tiers cost significantly more
- **Opportunity Cost**: Limited Lumens force strategic choices
- **Specialization Rewards**: Deep investment in one tree provides bonuses
- **Breadth Penalties**: Spreading too thin reduces effectiveness

SKILL VALIDATION & ERROR HANDLING
----------------------------------
**Unlock Validation:**
1. Check character has sufficient Lumens
2. Verify all prerequisites are met
3. Confirm skill isn't already unlocked
4. Validate racial restrictions
5. Ensure proper tier progression

**Error Prevention:**
- **UI Disabling**: Unavailable skills shown as unclickable
- **Prerequisite Display**: Clear indication of what's needed
- **Cost Display**: Show Lumen costs before purchase
- **Confirmation Dialogs**: Prevent accidental purchases
- **Undo Functionality**: Allow recent skill unlock reversal

TOGGLE SKILL SYSTEM
--------------------
The toggle skill system introduces stamina-based persistent abilities that require
ongoing resource management:

**Toggle Skill Mechanics:**
- **Activation Cost**: Initial stamina cost to activate the skill
- **Maintenance Cost**: Ongoing stamina cost per turn to maintain
- **Automatic Deactivation**: Skills deactivate if maintenance cost cannot be paid
- **Incompatibility**: Certain toggle skills cannot be active simultaneously
- **UI Integration**: Toggle skills show activation and maintenance costs in tooltips

**Current Toggle Skills:**

*Staff Toggle Skills:*
- **Frost Staff** (15L): Toggle ice enchantment (2 stamina activation, 2 stamina/turn)
- **Fire Staff** (15L): Toggle fire enchantment (3 stamina activation, 2 stamina/turn)

*Combat Stance Skills:*
- **Defensive Stance** (25L): +2 Physical Defence, -2 attack damage (1 stamina/turn)
- **Berserker Rage** (25L): +4 Strength and Physical Defence, additional attack (2 stamina/turn)
- **Polearm Defensive Stance** (15L): +2 AC, cannot move (1 stamina/turn)
- **Fortress Stance** (35L): +4 AC, reflect 50% damage (3 stamina/turn)

*Weapon Enchantment Skills:*
- **Poison Blade** (15L): Coat daggers with poison (2 stamina/turn)
- **Ricochet Axe** (25L): Thrown axes bounce to additional targets (3 stamina/turn)

*Elemental Weapon Skills:*
- **Flame/Frost/Storm/Shadow/Light** variants for all weapon types (15L each)
- Each provides +1d6 elemental damage and 20% chance for status effects
- All cost 2 stamina per turn to maintain

**Toggle Skill Management:**
- **Process Turn Button**: Consumes maintenance costs for all active toggle skills
- **Stamina Depletion**: If insufficient stamina, all toggle skills deactivate
- **Visual Feedback**: Active toggle skills are highlighted in the UI
- **Cost Display**: Tooltips show both activation and maintenance costs

================================================================================
                        5. COMBAT & STATS MECHANICS
================================================================================

CORE STATISTICS SYSTEM
-----------------------
Five primary stats define character capabilities:

**HEALTH POINTS (HP)**
- **Base Value**: 10 at character creation
- **Function**: Determines survival capacity and damage tolerance
- **Racial Modifiers**: Dwarves gain +2 HP, Halflings gain +1 HP
- **Equipment Bonuses**: Armor and accessories can increase maximum HP
- **Calculation**: Base + Racial + Equipment + Temporary bonuses
- **Combat Role**: Reaches 0 = character unconscious/death

**STAMINA**
- **Base Value**: 10 at character creation  
- **Function**: Fuel for special abilities and sustained actions
- **Racial Modifiers**: Halflings gain +1 Stamina
- **Usage**: Consumed by special attacks, magic spells, racial abilities
- **Regeneration**: Recovers over time or through rest/items
- **Calculation**: Base + Racial + Equipment + Temporary bonuses

**STRENGTH**
- **Base Value**: -3 at character creation (upgradeable through gameplay)
- **Range**: -3 to +8 (maximum lumen-purchased value)
- **Function**: Physical power affecting melee damage and carry capacity
- **Racial Modifiers**: Various races provide bonuses
- **Combat Impact**: Added to melee weapon damage rolls
- **Utility Uses**: Lifting, breaking, intimidation checks
- **Equipment Scaling**: Some weapons require minimum Strength
- **Upgrade Cost**: Tier 2 pricing (5L → 8L → 12L → 18L → 25L → 35L → 50L → 70L → 100L → 150L → 300L)

**MAGIC POWER** 
- **Base Value**: -3 at character creation (upgradeable through gameplay)  
- **Range**: -3 to +15 (as noted in code comments)
- **Function**: Magical ability affecting spell damage and mana
- **Racial Modifiers**: Various races provide bonuses
- **Spell Scaling**: Determines spell damage and effect intensity
- **Mana Pool**: May influence available spell uses per encounter
- **Resistance**: Higher Magic Power may provide magic resistance

**ACCURACY**
- **Base Value**: -3 at character creation (upgradeable through gameplay)
- **Range**: -3 to +8 (as noted in code comments)
- **Function**: Precision affecting hit chance and critical strikes
- **Racial Modifiers**: Various races provide bonuses
- **Combat Role**: Determines success rate for attacks and skills
- **Critical Hits**: Higher Accuracy increases critical hit probability
- **Skill Checks**: Used for precision-based non-combat activities

DAMAGE CALCULATION SYSTEM
--------------------------

**Basic Attack Formula:**
```
Base Damage = Weapon Damage + Relevant Stat Modifier
Final Damage = Base Damage × Critical Multiplier × Status Modifiers
```

**Weapon Damage Components:**
- **Base Weapon Damage**: Defined in weapon data (e.g., Sword = 6)
- **Stat Modifier**: Strength for melee, Accuracy for ranged
- **Skill Bonuses**: Weapon proficiency skills add damage
- **Enhancement Bonuses**: Enchanted weapons provide extra damage
- **Material Bonuses**: Higher quality materials increase damage

**Critical Hit System:**
- **Base Critical Chance**: 5% for all characters
- **Accuracy Influence**: Each point above 5 adds 1% critical chance
- **Racial Bonuses**: Elves gain additional 15% critical chance
- **Skill Modifiers**: Certain skills increase critical probability
- **Critical Damage**: 2× base damage (before other modifiers)

**Damage Types & Resistances:**
- **Physical**: Reduced by armor, blocked by shields
- **Fire**: Reduced by fire resistance, enhanced by vulnerability
- **Ice**: May cause slowing effects, reduced by cold resistance
- **Lightning**: Chain damage potential, reduced by grounding
- **Dark**: May cause fear effects, reduced by divine protection
- **Divine**: Extra damage vs undead, reduced by unholy protection

COMBAT MECHANICS
-----------------

**Initiative System:**
1. **Accuracy-Based**: Higher Accuracy acts first
2. **Tie-Breaking**: Equal Accuracy uses random determination
3. **Status Effects**: Some effects modify initiative order
4. **Surprise Rounds**: Stealth/ambush grants first action

**Action Economy:**
- **Move Action**: Change position on battlefield
- **Standard Action**: Attack, cast spell, use major ability
- **Minor Action**: Draw weapon, activate simple item
- **Free Actions**: Speak, drop item, simple gestures
- **Reaction**: Respond to enemy actions (limited per round)

**Attack Resolution:**
1. **Declare Action**: Choose attack type and target
2. **Roll to Hit**: d20 + Accuracy vs Target Defense
3. **Calculate Damage**: Apply formula with all modifiers
4. **Apply Effects**: Handle special abilities and status effects
5. **Update Status**: Modify HP, apply conditions, check for death

**Defense Mechanics:**
- **Armor Class**: Passive defense from equipment
- **Dodge Bonuses**: Active avoidance from skills/stats
- **Block Attempts**: Shield-based damage reduction
- **Magical Wards**: Spell-based protection effects
- **Cover Bonuses**: Environmental protection benefits

SPECIAL COMBAT SYSTEMS
-----------------------

**Status Effects Integration:**
- **Buffs**: Temporary bonuses to stats or abilities
- **Debuffs**: Temporary penalties or restrictions
- **Damage Over Time**: Ongoing effects like poison or burning
- **Crowd Control**: Stun, sleep, paralysis, charm effects
- **Dispelling**: Methods to remove beneficial/harmful effects

**Multi-Target Combat:**
- **Area Effects**: Spells and abilities affecting multiple targets
- **Chain Attacks**: Abilities that jump between enemies
- **Cleave Attacks**: Melee strikes hitting adjacent enemies
- **Targeting Priority**: AI systems for choosing optimal targets

**Environmental Factors:**
- **Terrain Effects**: Difficult ground, elevation bonuses
- **Weather Impact**: Rain affecting fire spells, wind affecting ranged
- **Lighting Conditions**: Darkness penalties, bright light bonuses
- **Elemental Hazards**: Lava, acid pools, electrical fields

PROGRESSION & SCALING
----------------------

**Stat Advancement:**
- **Level-Up Bonuses**: Characters may gain stat points over time
- **Equipment Scaling**: Better gear provides higher stat bonuses
- **Skill Synergies**: Certain skill combinations enhance stats
- **Temporary Boosts**: Potions and spells provide short-term increases

**Power Scaling Mechanisms:**
- **Weapon Upgrades**: Enhanced materials and enchantments
- **Skill Mastery**: Higher tier skills provide significant power jumps
- **Equipment Sets**: Matching equipment provides set bonuses
- **Racial Development**: Advanced racial abilities unlock over time

**Balance Considerations:**
- **Diminishing Returns**: Very high stats become expensive to increase
- **Opportunity Costs**: Investing in one area limits others
- **Rock-Paper-Scissors**: Different builds counter different threats
- **Scaling Challenges**: Enemies and encounters scale with character power

DAMAGE ANALYSIS & OPTIMIZATION
-------------------------------

**DPS Calculations:**
```javascript
// Example damage calculation function
function calculateDamage(character, weapon, target) {
    let baseDamage = weapon.damage;
    let statModifier = getRelevantStat(character, weapon.type);
    let skillBonuses = getWeaponSkillBonuses(character, weapon.category);
    let criticalChance = calculateCriticalChance(character.accuracy);
    let statusModifiers = getActiveStatusModifiers(character);
    
    let totalDamage = (baseDamage + statModifier + skillBonuses) * statusModifiers;
    
    if (Math.random() < criticalChance) {
        totalDamage *= 2; // Critical hit
    }
    
    return applyTargetResistances(totalDamage, target);
}
```

**Optimization Strategies:**
- **Stat Focus**: Specializing in primary combat stat for build
- **Skill Synergy**: Choosing skills that work well together
- **Equipment Matching**: Selecting gear that enhances chosen playstyle
- **Status Effect Utilization**: Maximizing beneficial effects while minimizing harmful ones

**Performance Metrics:**
- **Damage Per Second (DPS)**: Raw offensive output
- **Damage Per Lumen (DPL)**: Efficiency of skill investments
- **Survivability Index**: Combination of HP, armor, and avoidance
- **Versatility Rating**: Ability to handle different encounter types

================================================================================
                       6. INVENTORY & EQUIPMENT SYSTEM
================================================================================

EQUIPMENT CATEGORIES & SLOTS
-----------------------------

**WEAPON SLOTS**
- **Primary Weapon**: Main combat weapon (required for most builds)
- **Secondary Weapon**: Backup weapon or off-hand weapon for dual wielding
- **Weapon Types**: Swords, Bows, Staves, Axes, Daggers, Hammers, Spears
- **Two-Handed Weapons**: Occupy both weapon slots when equipped
- **Ranged Weapons**: Require ammunition (handled automatically)

**ARMOR SLOTS**
- **Head**: Helmets, caps, circlets (protection + potential special effects)
- **Chest**: Armor, robes, shirts (primary defense layer)
- **Legs**: Pants, leggings, leg armor (mobility vs protection)
- **Feet**: Boots, shoes, sandals (movement bonuses common)

**ACCESSORY SLOTS**
- **Ring 1**: First ring slot (typically stat bonuses or special effects)
- **Ring 2**: Second ring slot (allows stacking of ring effects)
- **Amulet**: Neck slot (often provides significant magical effects)

ITEM DATA STRUCTURE
-------------------
```javascript
item = {
    // Basic Identity
    id: "unique_item_identifier",
    name: "Display Name",
    description: "Detailed item description",
    
    // Category & Type
    category: "weapon", // weapon, armor, accessory, consumable, material
    type: "sword",      // specific type within category
    slot: "weapon",     // equipment slot if applicable
    
    // Visual Representation
    icon: "sword_icon.png",
    
    // Mechanical Properties
    stats: {
        damage: 6,           // for weapons
        armor: 3,            // for armor pieces
        strength: 2,         // stat bonuses
        magicPower: 1,
        accuracy: 0,
        hp: 5,
        stamina: 0
    },
    
    // Special Properties
    enchantments: [
        {
            id: "fire_enchantment",
            name: "Flaming",
            description: "Deals additional fire damage",
            effect: "fire_damage_bonus"
        }
    ],
    
    // Usage & Restrictions
    requirements: {
        strength: 5,         // minimum stats to use
        skills: ["sword_mastery"] // required skills
    },
    
    // Economy & Rarity
    value: 50,              // base market value in Lumens
    rarity: "uncommon",     // common, uncommon, rare, epic, legendary
    
    // Crafting & Materials
    materials: [
        { id: "iron_ingot", quantity: 2 },
        { id: "leather_strip", quantity: 1 }
    ],
    craftingLevel: 2,       // required crafting skill level
    
    // Metadata
    stackable: false,       // whether multiple can stack in inventory
    consumable: false,      // whether item is consumed on use
    questItem: false        // whether item is important for quests
}
```

EQUIPMENT MECHANICS
-------------------

**Stat Calculation System:**
```javascript
function calculateTotalStats(character) {
    let totalStats = { ...character.baseStats };
    
    // Add racial bonuses
    totalStats = applyRacialBonuses(totalStats, character.race);
    
    // Add equipment bonuses
    Object.values(character.equipment).forEach(item => {
        if (item && item.stats) {
            Object.keys(item.stats).forEach(stat => {
                totalStats[stat] += item.stats[stat];
            });
        }
    });
    
    // Add temporary status effect bonuses
    character.statusEffects.forEach(effect => {
        totalStats = applyStatusEffect(totalStats, effect);
    });
    
    return totalStats;
}
```

**Equipment Validation:**
- **Stat Requirements**: Minimum stats needed to equip items
- **Skill Prerequisites**: Required weapon proficiencies
- **Race Restrictions**: Some items limited to certain races
- **Slot Conflicts**: Prevent equipping conflicting items
- **Two-Handed Handling**: Automatically unequip secondary weapon

**Enhancement System:**
- **Enchantment Slots**: Items can have multiple enhancement sockets
- **Durability System**: Equipment degrades with use (optional)
- **Upgrade Paths**: Items can be improved through crafting
- **Set Bonuses**: Wearing matching equipment provides extra benefits

INVENTORY MANAGEMENT
--------------------

**Storage System:**
- **Inventory Array**: List of owned items with quantities
- **Stack Management**: Stackable items combine automatically
- **Weight System**: Optional encumbrance based on Strength
- **Sorting Options**: By type, value, name, acquisition date
- **Search Function**: Find items by name or property

**Item Acquisition Methods:**
1. **Shop Purchases**: Buy from merchants using Lumens
2. **Crafting Creation**: Make items using materials and skills
3. **Monster Drops**: Loot from defeated enemies
4. **Quest Rewards**: Story-based item acquisition
5. **Environmental Discovery**: Find items in exploration

**Inventory Operations:**
- **Equip/Unequip**: Move items between inventory and equipment slots
- **Drop/Delete**: Remove unwanted items permanently
- **Use Consumables**: Activate potions, scrolls, and temporary items
- **Examine Details**: View comprehensive item information
- **Quantity Management**: Adjust stackable item amounts

WEAPON SYSTEM DETAILS
----------------------

**Weapon Categories & Properties:**

*Swords:*
- **Damage**: 6 base damage
- **Stat Scaling**: Primary Strength, Secondary Accuracy
- **Special Properties**: Versatile, good critical hit potential
- **Skill Synergy**: Works with sword mastery skills
- **Materials**: Iron, Steel, Mithril, Dragonscale

*Bows:*
- **Damage**: 5 base damage
- **Stat Scaling**: Primary Accuracy, Secondary Strength
- **Special Properties**: Ranged, high critical chance
- **Ammunition**: Arrows (handled automatically)
- **Range Modifiers**: Damage falls off at extreme distances

*Staves:*
- **Damage**: 4 base damage
- **Stat Scaling**: Primary Magic Power, Secondary Accuracy
- **Special Properties**: Magic focus, spell enhancement
- **Spell Integration**: Some spells require staff to cast
- **Elemental Variants**: Staves attuned to specific elements

*Axes:*
- **Damage**: 7 base damage
- **Stat Scaling**: Primary Strength, minimal other scaling
- **Special Properties**: High damage, slower attack speed
- **Cleave Potential**: Can hit multiple adjacent enemies
- **Critical Effects**: Devastating critical hits

*Daggers:*
- **Damage**: 4 base damage
- **Stat Scaling**: Primary Accuracy, Secondary Strength
- **Special Properties**: Fast attacks, stealth synergy
- **Dual Wielding**: Can equip in both weapon slots
- **Backstab Bonuses**: Extra damage from behind

*Hammers:*
- **Damage**: 8 base damage
- **Stat Scaling**: Primary Strength, Secondary Accuracy
- **Special Properties**: Armor crushing, stunning effects
- **Material Synergy**: Effective against armored opponents
- **Knock-back**: Can push enemies away

ARMOR SYSTEM DETAILS
---------------------

**Armor Categories:**

*Light Armor (Leather):*
- **Armor Value**: 1-3 points
- **Mobility**: No movement penalties
- **Stealth**: No stealth penalties
- **Magic**: No spell-casting penalties
- **Upgrade Path**: Leather → Studded Leather → Leather of Protection

*Medium Armor (Chain):*
- **Armor Value**: 3-6 points
- **Mobility**: Minor movement penalty
- **Stealth**: Moderate stealth penalty
- **Magic**: Minor spell-casting penalty
- **Upgrade Path**: Chain Shirt → Chain Mail → Chain of Warding

*Heavy Armor (Plate):*
- **Armor Value**: 6-10 points
- **Mobility**: Significant movement penalty
- **Stealth**: Major stealth penalty
- **Magic**: Moderate spell-casting penalty
- **Upgrade Path**: Scale Mail → Plate Mail → Plate of the Guardian

**Armor Mechanics:**
- **Damage Reduction**: Subtracts from incoming physical damage
- **Elemental Resistance**: Some armors resist specific damage types
- **Skill Requirements**: Heavy armor requires strength and training
- **Maintenance**: Armor may require repair after heavy damage
- **Enchantment Capacity**: Better armors hold more enchantments

ACCESSORY SYSTEM
-----------------

**Ring Effects:**
- **Stat Bonuses**: Most common ring effect (+1 to +3 stats)
- **Resistance Grants**: Protection from specific damage types
- **Skill Enhancements**: Bonuses to specific abilities
- **Regeneration**: HP or Stamina recovery over time
- **Special Abilities**: Unique magical effects

**Amulet Powers:**
- **Major Stat Bonuses**: Larger bonuses than rings (+2 to +5)
- **Spell-Like Abilities**: Activated magical effects
- **Passive Protections**: Constant defensive benefits
- **Skill Prerequisites**: Access to normally restricted abilities
- **Set Piece Anchors**: Core pieces of equipment sets

QUALITY & RARITY SYSTEM
------------------------

**Rarity Tiers:**
1. **Common**: Standard equipment, easily found/crafted
2. **Uncommon**: Enhanced versions with minor bonuses
3. **Rare**: Significantly improved with special properties
4. **Epic**: Powerful items with major magical effects
5. **Legendary**: Unique artifacts with game-changing abilities

**Quality Modifiers:**
- **Masterwork**: +1 to all relevant stats, +50% value
- **Superior**: +2 to all relevant stats, +100% value
- **Exquisite**: +3 to all relevant stats, +200% value
- **Perfect**: +5 to all relevant stats, +500% value

**Naming Convention:**
- Format: [Quality] [Material] [Base Item] [of Enhancement]
- Example: "Superior Mithril Sword of Fire"
- Unique Items: Custom names like "Dragonbane" or "Soul Render"

================================================================================
                         7. SHOP & ECONOMY MECHANICS
================================================================================

DUAL CURRENCY SYSTEM
---------------------
The system now uses two distinct currencies for different purposes:

**LUMENS (Skill Currency):**
- **Purpose**: Unlock skills and abilities
- **Starting Amount**: 150 Lumens
- **Sources**: Skill usage, monster defeats, quest completion
- **Uses**: Skill unlocks exclusively (5-25 Lumens per skill)

**GIL (Equipment Currency):**
- **Purpose**: Purchase equipment and items
- **Starting Amount**: 65 Gil (carefully balanced for early game)
- **Sources**: Selling items, quest rewards, monster loot
- **Uses**: Equipment, consumables, crafting materials

GIL CURRENCY DESIGN
-------------------
Gil provides a simplified, intuitive currency system inspired by Final Fantasy:

**Gil Sources:**
- **Item Sales**: Sell equipment for 50% of purchase price
- **Monster Defeats**: Gil rewards from combat victories
- **Quest Completion**: Substantial Gil rewards for major objectives
- **Found Treasure**: Environmental Gil discoveries

**Early Game Balance:**
- **Starting Gil**: 65 (enough for basic starter kit + consumables)
- **Tier 1 Weapon**: 10 Gil (Rusty Sword, Rusty Dagger)
- **Tier 1 Armor**: 15 Gil (Simple Robes)
- **Tier 1 Accessory**: 30 Gil (Copper Ring, Iron Band, Silver Ring)
- **Remaining for Consumables**: 10 Gil spare

MASSIVE SHOP EXPANSION
----------------------
The shop system now features 364+ unique items across all categories:

**UNIVERSAL SHOP CATEGORIES:**

*Weapons (7 Categories):*
- **Swords**: 21 items (Rusty Sword to Divine Blade)
- **Bows**: 18 items (Training Bow to Cosmic Bow)
- **Staves**: 21 items (Wooden Staff to Universe Staff)
- **Axes**: 18 items (Rusty Axe to Titan Axe)
- **Daggers**: 18 items (Rusty Dagger to Shadow Fang)
- **Hammers**: 15 items (Wooden Hammer to World Breaker)
- **Polearms**: 18 items (Simple Spear to Genesis Halberd)

*Armor (3 Categories):*
- **Light Armor**: 45+ items (Simple Robes to Divine Vestments)
- **Medium Armor**: 35+ items (Leather Armor to Dragonscale Mail)
- **Heavy Armor**: 40+ items (Chain Mail to Adamantine Plate)

*Accessories (3 Categories):*
- **Rings**: 24 items (Copper Ring to Divine Ring of Power)
- **Amulets**: 24 items (Simple Amulet to Cosmic Amulet)
- **Special Accessories**: 15+ items (Lucky Charms to Legendary Artifacts)

*Materials & Consumables:*
- **Crafting Materials**: 30+ items (Basic metals to rare essences)
- **Consumables**: 25+ items (Potions, scrolls, temporary effects)

SHOP SYSTEM ARCHITECTURE
-------------------------

**Dynamic Pricing Model:**
All items use direct Gil pricing through their `price` property. No dynamic calculation - prices are fixed and balanced for gameplay progression.

**Shop Organization:**
- **Categorized Tabs**: Weapons, Armor, Accessories, Materials, Consumables
- **Tier-Based Progression**: Items unlock as characters advance
- **Rarity Distribution**: Common to Legendary items available
- **Smart Sorting**: Items organized by power level and price
- **Search & Filter**: Find items by name, type, or properties

ITEM PRICING STRUCTURE (GIL)
-----------------------------

**Weapons:**
- **Tier 1**: 10 Gil (Rusty weapons)
- **Tier 2**: 25-30 Gil (Iron weapons)
- **Tier 3**: 45-60 Gil (Steel weapons)
- **Tier 4**: 90-180 Gil (Enhanced weapons)
- **Tier 5**: 320-340 Gil (Master weapons)
- **Legendary**: 750-4000 Gil (Ultimate weapons)

**Armor:**
- **Tier 1**: 15 Gil (Simple Robes)
- **Tier 2**: 25 Gil (Basic Leather/Padded)
- **Tier 3**: 35-50 Gil (Enhanced armor)
- **Tier 4**: 75-150 Gil (Superior protection)
- **Tier 5**: 200-350 Gil (Master-crafted)
- **Legendary**: 500-2000 Gil (Legendary protection)

**Accessories:**
- **Tier 1**: 30 Gil (Basic rings)
- **Tier 2**: 50-60 Gil (Enhanced accessories)
- **Tier 3**: 80-120 Gil (Superior accessories)
- **Tier 4**: 180-250 Gil (Master accessories)
- **Tier 5**: 400-600 Gil (Legendary accessories)

**Materials:**
- **Common**: 5-15 Gil (Basic crafting materials)
- **Uncommon**: 20-40 Gil (Enhanced materials)
- **Rare**: 60-100 Gil (Superior materials)
- **Legendary**: 150-500 Gil (Exotic materials)

**Consumables:**
- **Basic Potions**: 8-15 Gil (Healing, mana restoration)
- **Advanced Potions**: 25-50 Gil (Stat enhancement)
- **Specialty Items**: 75-200 Gil (Rare temporary effects)

ECONOMIC BALANCE MECHANISMS
----------------------------

**Dual Currency Balance:**
- **Lumen Scaling**: Skill costs increase exponentially (5→10→15→20→25)
- **Gil Scarcity**: Early game Gil carefully limited to force choices
- **Separation of Concerns**: Skills vs Equipment use different currencies
- **Cross-Currency Value**: Items can be sold for Gil, not Lumens

**Early Game Economy:**
- **Starter Budget**: 65 Gil total starting money
- **Basic Kit Cost**: 55 Gil (Tier 1 weapon + armor + accessory)
- **Consumable Budget**: 10 Gil remaining for potions/supplies
- **Progression Gate**: Must earn more Gil to upgrade equipment

**Mid-Late Game Scaling:**
- **Exponential Pricing**: Higher tier items cost dramatically more
- **Selling Economy**: 50% sell value creates Gil circulation
- **Resource Choices**: Limited Gil forces strategic equipment decisions
- **Endgame Items**: Legendary equipment requires substantial Gil investment

**Balance Philosophy:**
- **Meaningful Choices**: Players cannot afford everything immediately
- **Progressive Unlock**: Better items require earning more currency
- **Economic Pressure**: Scarcity creates strategic decision-making
- **Reward Structure**: Powerful items feel earned, not given

================================================================================
                        8. CRAFTING SYSTEM IMPLEMENTATION
================================================================================

CRAFTING SYSTEM STATUS
-----------------------
**Current Status**: PARTIALLY IMPLEMENTED - Framework exists but system is incomplete

**What's Working**:
- UI Framework: Crafting tab and interface structure
- Material Categories: Crafting materials exist in item database  
- Profession Skills: Smithing, Alchemy, Enchanting, Cooking skills defined
- Integration Points: Render functions and material filtering implemented

**What's Missing**:
- Recipe System: No actual crafting recipes implemented
- Crafting Logic: Item creation mechanics not complete
- Material Consumption: Crafting doesn't consume materials yet
- Result Generation: Output items not properly created

**Future Implementation**: The system is designed for expansion with skill-based progression, material quality systems, and economy integration.

**PLANNED CRAFTING CATEGORIES** *(For Future Implementation)*:

**SMITHING SKILLS:**
- **Tier 1**: Basic Smithing (5 Lumens) - Craft basic metal items
- **Tier 2**: Advanced Smithing (10 Lumens) - Craft enhanced equipment  
- **Tier 3**: Master Smithing (15 Lumens) - Craft superior items
- **Tier 4**: Legendary Smithing (20 Lumens) - Craft legendary equipment
- **Tier 5**: Divine Smithing (25 Lumens) - Craft artifacts with unlimited enchantments

**ALCHEMY SKILLS:**
- **Tier 1**: Herb Gathering (5 Lumens) - Find and identify plants
- **Tier 2**: Potion Brewing (10 Lumens) - Create magical potions
- **Tier 3**: Advanced Alchemy (15 Lumens) - Create powerful elixirs
- **Tier 4**: Master Alchemy (20 Lumens) - Create rare alchemical items
- **Tier 5**: Transmutation (25 Lumens) - Transform base materials

**ENCHANTING SKILLS:**
- **Tier 1**: Basic Enchanting (5 Lumens) - Add minor magic to items
- **Tier 2**: Advanced Enchanting (10 Lumens) - Powerful enchantments
- **Tier 3**: Master Enchanting (15 Lumens) - Create unique magic items
- **Tier 4**: Artifact Enchanting (20 Lumens) - Enchant legendary items
- **Tier 5**: Divine Enchanting (25 Lumens) - Create game-changing artifacts

MATERIAL SYSTEM
---------------

**Common Materials (1-5 Lumens):**
- Iron Ingots: Basic metal for weapons and armor
- Leather: Basic armor crafting material
- Wood: Weapon handles, staff cores, arrow shafts
- Stone: Building materials, grinding stones
- Common Herbs: Basic potion ingredients

**Uncommon Materials (8-15 Lumens):**
- Steel Ingots: Enhanced metal for better equipment
- Silk: High-quality fabric for robes and enchantments
- Hardwood: Durable weapon components
- Silver: Magical conductivity, anti-undead properties
- Rare Herbs: Advanced potion components

**Rare Materials (20-50 Lumens):**
- Mithril: Lightweight, incredibly strong magical metal
- Dragon Scale: Legendary armor material with elemental resistance
- Adamantine: Hardest material, unbreakable weapons
- Phoenix Feather: Fire immunity, resurrection properties
- Elemental Crystals: Pure elemental energy storage

**Legendary Materials (100-500 Lumens):**
- Starfall Metal: Meteoric metal with cosmic properties
- Void Crystal: Anti-magic properties, dimensional storage
- World Tree Wood: Living wood that grows with the wielder
- Divine Essence: Pure divinity for artifact creation
- Time Crystal: Temporal manipulation properties

CRAFTING MECHANICS
-------------------

**Recipe System:**
```javascript
// Example crafting recipe structure
const craftingRecipe = {
    id: "mithril_sword",
    name: "Mithril Sword",
    category: "weapon",
    tier: 4,
    requiredSkill: "master_smithing",
    requiredLevel: 4,
    
    materials: [
        { id: "mithril_ingot", quantity: 3 },
        { id: "leather_grip", quantity: 1 },
        { id: "silver_wire", quantity: 2 }
    ],
    
    baseStats: {
        damage: 10,
        accuracy: 2,
        durability: 100
    },
    
    craftingTime: 480, // 8 hours in minutes
    failureChance: 15, // 15% chance to fail
    
    successResult: {
        item: "mithril_sword",
        quality: "superior",
        enchantmentSlots: 2
    },
    
    failureResult: {
        materialsLost: 0.5, // Lose 50% of materials
        experienceGained: 0.25 // Still gain some experience
    }
}
```

**Quality System:**
- **Normal**: Standard crafted items (base stats)
- **Fine**: +10% to all stats, +25% value
- **Superior**: +25% to all stats, +50% value, +1 enchantment slot
- **Exceptional**: +50% to all stats, +100% value, +2 enchantment slots
- **Masterwork**: +75% to all stats, +200% value, +3 enchantment slots
- **Legendary**: +100% to all stats, +500% value, unique properties

**Crafting Process:**
1. **Recipe Selection**: Choose from available recipes based on skill level
2. **Material Gathering**: Acquire all required components
3. **Skill Check**: Roll against difficulty with modifiers
4. **Time Investment**: Wait for crafting completion
5. **Quality Determination**: Roll for final item quality
6. **Result Application**: Receive finished item or partial materials back

DWARVEN RACIAL BONUS
--------------------
Dwarves receive special crafting advantages:
- **Master Craftsman**: All crafting recipes require 1 less material (minimum 1)
- **Stone Sense**: Can detect and mine rare minerals
- **Dwarven Resilience**: Bonus to crafting success rates
- **Traditional Knowledge**: Access to exclusive dwarven recipes

ENCHANTMENT INTEGRATION
-----------------------

**Enchantment Slots:**
- **Basic Items**: 0-1 enchantment slots
- **Quality Items**: Additional slots based on quality level
- **Legendary Items**: 3+ enchantment slots
- **Artifacts**: Unlimited enchantment capacity (Divine Smithing)

**Enchantment Types:**
- **Stat Bonuses**: +1 to +5 increases to character statistics
- **Elemental Effects**: Fire damage, ice slowing, lightning chains
- **Special Abilities**: Vampiric healing, critical strike bonuses
- **Resistance Grants**: Protection from specific damage types
- **Unique Properties**: Teleportation, invisibility, flight

**Enhancement Process:**
1. **Base Item**: Must have available enchantment slots
2. **Enchanting Skill**: Appropriate tier of enchanting skill required
3. **Material Cost**: Magical components and Lumens
4. **Risk/Reward**: Higher tier enchantments have failure chances
5. **Permanent Binding**: Enchantments become part of the item

CRAFTING ECONOMY
----------------

**Material Sources:**
- **Monster Drops**: Creatures drop materials based on type and rarity
- **Environmental Gathering**: Mine, harvest, and collect from world
- **Shop Purchases**: Buy materials from specialized vendors
- **Quest Rewards**: Obtain rare materials through story progression
- **Player Trading**: Exchange materials with other characters

**Economic Balance:**
- **Time Investment**: Crafting takes significant time
- **Material Costs**: High-tier items require expensive components
- **Skill Prerequisites**: Must invest Lumens in crafting skills
- **Risk Factors**: Chance to lose materials on failed attempts
- **Market Competition**: Crafted items compete with shop inventory

**Profit Potential:**
- **Value Creation**: Turn cheap materials into expensive equipment
- **Custom Solutions**: Create items for specific character builds
- **Rare Material Access**: Control over limited-supply components
- **Service Economy**: Craft items for other players
- **Long-term Investment**: High-tier crafting pays off over time

================================================================================
                        9. MONSTER SYSTEM & AI OPPONENTS
================================================================================

MONSTER DESIGN PHILOSOPHY
--------------------------
The monster system provides diverse opponents with unique abilities, tactical 
challenges, and meaningful rewards. Each monster type offers:

- **Distinct Combat Roles**: Tank, damage dealer, support, crowd control
- **Scaling Difficulty**: Monsters scale with player character progression
- **Unique Abilities**: Special attacks and defensive mechanics
- **Thematic Consistency**: Abilities match monster lore and appearance
- **Reward Incentives**: Valuable loot drops encourage engagement

MONSTER CATEGORIES
------------------

**BASIC MONSTERS (Challenge Rating 1-3):**
- **Goblin Scout**: Fast, weak enemies with pack tactics
- **Skeleton Warrior**: Undead with basic weapon skills
- **Giant Rat**: Swarm creatures with disease attacks
- **Wolf**: Pack hunters with coordinated strikes
- **Orc Raider**: Brutal warriors with rage abilities

**INTERMEDIATE MONSTERS (Challenge Rating 4-7):**
- **Troll Berserker**: High HP regeneration and cleave attacks
- **Fire Elemental**: Elemental damage and fire immunity
- **Dark Mage**: Spell-casting with magical defenses
- **Minotaur Guardian**: High armor and charge attacks
- **Shadow Assassin**: Stealth and critical strike abilities

**ADVANCED MONSTERS (Challenge Rating 8-12):**
- **Dragon Wyrmling**: Breath weapons and flight
- **Lich**: Powerful magic and undead immunities
- **Demon Lord**: Multiple resistances and fear auras
- **Stone Golem**: Physical immunity and earthquake attacks
- **Phoenix**: Fire mastery and resurrection abilities

**LEGENDARY MONSTERS (Challenge Rating 13+):**
- **Ancient Dragon**: Ultimate magical and physical power
- **Demon Prince**: Reality-warping abilities
- **Elemental Lord**: Mastery over fundamental forces
- **Death Knight**: Combination of martial and magical supremacy
- **World Serpent**: Titanic size and world-shaking powers

MONSTER DATA STRUCTURE
-----------------------
```javascript
monster = {
    // Basic Identity
    id: "fire_dragon",
    name: "Ancient Fire Dragon",
    description: "Legendary dragon with mastery over flame",
    
    // Challenge Rating
    challengeRating: 15,
    experienceValue: 5000,
    
    // Statistics
    stats: {
        hp: 500,
        maxHp: 500,
        stamina: 100,
        maxStamina: 100,
        strength: 12,
        magicPower: 15,
        accuracy: 8,
        speed: 6,
        physicalDefence: 18,
        magicalDefence: 20
    },
    
    // Resistances & Immunities
    resistances: {
        fire: 100,      // Immune to fire
        ice: -50,       // Vulnerable to ice
        physical: 25    // 25% physical resistance
    },
    
    // Special Abilities
    abilities: [
        {
            id: "dragon_breath",
            name: "Fire Breath",
            type: "action",
            staminaCost: 15,
            cooldown: 3,
            description: "Breathe fire in 60ft cone (4d10 fire damage)"
        },
        {
            id: "frightful_presence",
            name: "Frightful Presence",
            type: "aura",
            range: 120,
            description: "Enemies within range must save or become frightened"
        }
    ],
    
    // Loot Table
    lootTable: [
        { item: "dragon_scale", chance: 100, quantity: "3d6" },
        { item: "fire_gem", chance: 75, quantity: "1d3" },
        { item: "legendary_weapon", chance: 25, quantity: 1 },
        { lumens: "500-1000", chance: 100 }
    ],
    
    // AI Behavior
    aiType: "aggressive_caster",
    behaviors: [
        "prioritize_weak_targets",
        "use_breath_weapon_on_groups",
        "maintain_flight_advantage",
        "retreat_when_heavily_wounded"
    ]
}
```

MONSTER ABILITIES SYSTEM
-------------------------

**Ability Types:**
- **Action**: Standard attack or spell requiring stamina
- **Reaction**: Response to player actions or triggers
- **Passive**: Always-active effects and resistances
- **Aura**: Area effects that continuously influence combat
- **Legendary**: Special abilities only usable once per encounter

**Common Monster Abilities:**

*Offensive Abilities:*
- **Multi-Attack**: Strike multiple times per turn
- **Breath Weapons**: Elemental area-of-effect attacks
- **Spell Casting**: Access to magical abilities
- **Critical Strikes**: Enhanced damage on successful hits
- **Charge Attacks**: Movement-based damage bonuses

*Defensive Abilities:*
- **Damage Resistance**: Reduced damage from specific types
- **Regeneration**: Heal HP over time during combat
- **Armor Class Bonuses**: Harder to hit with attacks
- **Magic Resistance**: Resistance to spell effects
- **Damage Reflection**: Return portion of damage to attacker

*Utility Abilities:*
- **Flight**: Three-dimensional movement advantages
- **Invisibility**: Stealth and surprise attack potential
- **Teleportation**: Instant movement across battlefield
- **Summoning**: Call additional monsters to aid in fight
- **Status Effects**: Apply debuffs to player characters

AI BEHAVIOR SYSTEM
-------------------

**AI Personality Types:**

*Aggressive:*
- Always attacks strongest available target
- Uses most powerful abilities first
- Ignores self-preservation in favor of damage
- Suitable for berserkers, undead, constructs

*Tactical:*
- Analyzes battlefield and chooses optimal targets
- Saves powerful abilities for crucial moments
- Retreats when severely wounded
- Suitable for intelligent humanoids, dragons

*Defensive:*
- Prioritizes survival over dealing damage
- Uses defensive abilities and healing when available
- Attempts to outlast opponents through attrition
- Suitable for guardians, tanks, protective creatures

*Support:*
- Focuses on buffing allies and debuffing enemies
- Stays away from direct combat when possible
- Uses positioning to maximum advantage
- Suitable for spellcasters, shamans, commanders

**Decision-Making Algorithm:**
```javascript
function monsterAI(monster, battlefield, turn) {
    // Assess current situation
    let threat_level = assessThreatLevel(battlefield.enemies);
    let health_percentage = monster.currentHP / monster.maxHP;
    let available_abilities = getAvailableAbilities(monster);
    
    // Determine priority action based on AI type
    switch(monster.aiType) {
        case 'aggressive':
            return chooseHighestDamageAction(available_abilities);
        case 'tactical':
            return chooseBestTacticalAction(threat_level, available_abilities);
        case 'defensive':
            if (health_percentage < 0.3) return chooseHealingAction();
            return chooseDefensiveAction(available_abilities);
        case 'support':
            return chooseSupportAction(battlefield.allies, available_abilities);
    }
}
```

SCALING SYSTEM
---------------

**Level-Based Scaling:**
- **HP Scaling**: Monsters gain HP based on party average level
- **Damage Scaling**: Attack damage increases with challenge rating
- **Ability Unlocks**: Higher level monsters access more abilities
- **Resistance Scaling**: Tougher monsters resist more damage types
- **Loot Scaling**: Better rewards from higher challenge rating enemies

**Dynamic Difficulty:**
- **Party Size Adjustment**: More/stronger monsters for larger parties
- **Equipment Consideration**: Better-equipped parties face tougher foes
- **Skill Level Adaptation**: Monsters scale with player skill progression
- **Economic Balance**: Loot rewards scale with monster difficulty
- **Encounter Variety**: Mix of easy, moderate, and hard encounters

LOOT SYSTEM INTEGRATION
------------------------

**Loot Categories:**
- **Materials**: Crafting components unique to monster types
- **Equipment**: Weapons and armor scaled to monster difficulty
- **Consumables**: Potions and scrolls for immediate use
- **Lumens**: Currency rewards for character progression
- **Special Items**: Unique drops with special properties

**Drop Rate Mechanics:**
- **Guaranteed Drops**: Basic materials and Lumens always drop
- **Rare Drops**: Low-chance high-value items (5-25% chance)
- **Legendary Drops**: Extremely rare unique items (1-5% chance)
- **Conditional Drops**: Special requirements trigger bonus loot
- **Scaling Rewards**: Better loot from higher difficulty monsters

MONSTER CREATION TOOLS
-----------------------

**Template System:**
- **Base Templates**: Starting points for common monster types
- **Modifier Application**: Add special abilities and traits
- **Stat Adjustment**: Scale statistics for desired difficulty
- **Loot Customization**: Define reward drops and quantities
- **AI Configuration**: Set behavioral patterns and priorities

**Balancing Guidelines:**
- **Challenge Rating**: Objective measure of monster difficulty
- **Action Economy**: Monsters should threaten but not overwhelm
- **Counterplay Options**: Players should have tactical responses
- **Reward Proportionality**: Difficulty should match rewards
- **Encounter Pacing**: Mix easy, moderate, and hard encounters

================================================================================
                        10. STATUS EFFECTS & BUFFS/DEBUFFS
================================================================================

STATUS EFFECT SYSTEM OVERVIEW
------------------------------
Status effects provide temporary modifications to character and monster 
capabilities, adding tactical depth and strategic timing to combat encounters.

**Core Mechanics:**
- **Duration-Based**: Most effects last a specific number of turns
- **Stackable vs Non-Stackable**: Some effects can be applied multiple times
- **Dispellable**: Magic can remove certain status effects
- **Resistance**: Some creatures resist or are immune to specific effects
- **Application Chances**: Skills have percentage chances to apply effects

STATUS EFFECT CATEGORIES
-------------------------

**BENEFICIAL EFFECTS (BUFFS):**

*Combat Buffs:*
- **Blessed**: +2 to all attack rolls and saving throws (5 turns)
- **Haste**: +1 additional action per turn (3 turns)
- **Strength**: +4 Strength for damage calculations (6 turns)
- **Accuracy**: +3 Accuracy for hit calculations (6 turns)
- **Magic Power**: +4 Magic Power for spell damage (6 turns)
- **Armor**: +3 AC bonus from magical protection (8 turns)

*Defensive Buffs:*
- **Shield**: Absorb next 20 points of damage (until consumed)
- **Resistance**: 50% reduction to specific damage type (10 turns)
- **Immunity**: Complete protection from damage type (5 turns)
- **Regeneration**: Heal 2 HP per turn (10 turns)
- **Evasion**: +4 AC bonus from enhanced reflexes (4 turns)

*Utility Buffs:*
- **Flight**: Immune to ground effects, enhanced mobility (6 turns)
- **Invisibility**: Cannot be targeted by direct attacks (3 turns)
- **Stealth**: +8 bonus to stealth checks (until attacking)
- **Speed**: +2 Speed for initiative and movement (8 turns)
- **Luck**: Reroll any failed roll once per turn (5 turns)

**HARMFUL EFFECTS (DEBUFFS):**

*Damage Over Time:*
- **Burning**: Take 1d4 fire damage per turn (5 turns)
- **Poisoned**: Take 1d6 poison damage per turn (8 turns)
- **Bleeding**: Take 1d3 physical damage per turn (6 turns)
- **Frozen**: Take 1d4 ice damage, -2 Speed (4 turns)
- **Shocked**: Take 1d4 lightning damage, 25% action failure (3 turns)

*Ability Impairment:*
- **Weakened**: -4 Strength penalty to damage (6 turns)
- **Confused**: 50% chance to attack random target (4 turns)
- **Blinded**: -6 Accuracy penalty, cannot target specific enemies (5 turns)
- **Silenced**: Cannot cast spells or use vocal abilities (4 turns)
- **Slowed**: -2 Speed, lose one action per turn (6 turns)

*Crowd Control:*
- **Stunned**: Cannot take actions (2 turns)
- **Paralyzed**: Cannot move or take actions (3 turns)
- **Charmed**: Enemy controls your actions (3 turns)
- **Frightened**: Must move away from source, -2 to all rolls (5 turns)
- **Incapacitated**: Reduced to 1 HP, cannot gain HP (until dispelled)

STATUS EFFECT APPLICATION
--------------------------

**Skill-Based Application:**
```javascript
// Status effect application chances by skill tier
const statusChances = {
    tier2: 20,  // 20% chance for Tier 2 skills
    tier3: 40,  // 40% chance for Tier 3 skills  
    tier4: 75,  // 75% chance for Tier 4 skills
    tier5: 95   // 95% chance for Tier 5 skills
};

// Example skill with status effect
{
    id: 'frost_bolt',
    name: 'Frost Bolt',
    tier: 3,
    description: 'Ice projectile with 40% chance to apply Slowed',
    statusEffect: {
        effect: 'slowed',
        chance: 40,
        duration: 4
    }
}
```

**Resistance & Immunity:**
- **Racial Resistances**: Some races immune to specific effects
- **Equipment Protection**: Magical items provide status immunities
- **Skill-Based Immunity**: High-tier skills grant protection
- **Temporary Immunity**: Some spells provide brief protection
- **Stacking Rules**: Multiple resistances may stack or override

**Dispelling Mechanics:**
- **Magic Dispel**: Remove magical effects with dispel spells
- **Natural Recovery**: Effects end after duration expires
- **Item Usage**: Consumables can cure specific effects
- **Skill Abilities**: Some skills remove or transfer effects
- **Death Reset**: All effects removed upon character death/revival

STATUS EFFECT INTERACTIONS
---------------------------

**Buff Stacking:**
- **Same Effect**: Usually doesn't stack (refreshes duration)
- **Similar Effects**: May stack with diminishing returns
- **Opposite Effects**: Cancel each other out
- **Synergy Bonuses**: Some combinations provide extra benefits
- **Duration Management**: Track multiple effect timers

**Debuff Resistance:**
- **Progressive Resistance**: Repeated applications become less effective
- **Immunity Periods**: Brief immunity after effect ends
- **Cleansing Effects**: Some abilities remove multiple debuffs
- **Status Priority**: Certain effects override others
- **Conditional Application**: Some effects only work in specific situations

**Combat Integration:**
```javascript
function applyStatusEffect(target, effect, source) {
    // Check for immunity
    if (target.immunities.includes(effect.type)) {
        return false;
    }
    
    // Check for resistance
    let chance = effect.baseChance;
    if (target.resistances[effect.type]) {
        chance *= (1 - target.resistances[effect.type]);
    }
    
    // Roll for application
    if (Math.random() < chance) {
        target.statusEffects.push({
            ...effect,
            source: source.id,
            turnsRemaining: effect.duration
        });
        return true;
    }
    
    return false;
}
```

STRATEGIC APPLICATIONS
-----------------------

**Offensive Strategies:**
- **Damage Amplification**: Combine damage buffs with powerful attacks
- **Control Tactics**: Use crowd control to limit enemy actions
- **DoT Stacking**: Apply multiple damage-over-time effects
- **Debuff Synergy**: Layer debuffs for maximum effectiveness
- **Timing Windows**: Apply effects at optimal moments

**Defensive Strategies:**
- **Preemptive Buffing**: Apply protective effects before combat
- **Status Cleansing**: Remove harmful effects quickly
- **Immunity Timing**: Use temporary immunities strategically
- **Resistance Stacking**: Layer multiple forms of protection
- **Recovery Planning**: Manage effect durations and cooldowns

**Economic Considerations:**
- **Stamina Costs**: Status effect abilities consume resources
- **Material Requirements**: Some effects require consumable components
- **Opportunity Costs**: Using buffs/debuffs vs direct damage
- **Duration Value**: Longer effects provide better resource efficiency
- **Situational Usage**: Save powerful effects for important encounters

MONSTER STATUS EFFECTS
-----------------------

**Unique Monster Effects:**
- **Dragon Fear**: Area fear effect from powerful dragons
- **Undead Drain**: Life force absorption from undead creatures
- **Elemental Aura**: Continuous elemental damage from elementals
- **Mind Control**: Temporary player character control by psychic monsters
- **Phase Shift**: Partial immunity to physical attacks

**Boss Mechanics:**
- **Enrage**: Increased damage when health drops below 25%
- **Legendary Resistance**: Automatic success on some saving throws
- **Phase Changes**: Different abilities and effects at different health levels
- **Minion Summoning**: Call additional creatures during combat
- **Environmental Effects**: Modify battlefield during encounter

BALANCING CONSIDERATIONS
------------------------

**Power Level Management:**
- **Duration Limits**: Prevent permanent advantage accumulation
- **Stacking Restrictions**: Avoid overpowered effect combinations
- **Cooldown Periods**: Limit frequency of powerful effect usage
- **Resource Costs**: Balance power with stamina/material requirements
- **Counterplay Options**: Ensure players can respond to all effects

**Game Flow Impact:**
- **Combat Pacing**: Effects should enhance, not slow down encounters
- **Decision Complexity**: Provide meaningful choices without overwhelming
- **Visual Clarity**: Players should understand active effects easily
- **Turn Economy**: Effects shouldn't extend combats unnecessarily
- **Narrative Integration**: Effects should make thematic sense

================================================================================
                        11. USER INTERFACE & NAVIGATION
================================================================================

UI ARCHITECTURE OVERVIEW
-------------------------
The user interface employs a modular, tab-based design with responsive layouts
and consistent visual theming. Key principles include:

- **Single Page Application**: All functionality in one HTML file
- **Tab-Based Navigation**: Clear separation of different system areas
- **Modal Dialog System**: Consistent popup handling for all interactions
- **Real-Time Updates**: Immediate reflection of character changes
- **Accessibility**: Keyboard navigation and screen reader support

MAIN NAVIGATION STRUCTURE
--------------------------

**Primary Tabs:**
1. **Characters**: Character management and selection
2. **Skills**: Skill trees and progression tracking
3. **Inventory**: Equipment and item management
4. **Shop**: Purchasing weapons, armor, and materials
5. **Crafting**: Item creation and enhancement
6. **Combat**: Battle simulator and testing
7. **Notes**: Player note-taking and campaign tracking

**Tab Switching Mechanism:**
```javascript
function showTab(tabName) {
    // Hide all tab content
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.style.display = 'none';
    });
    
    // Remove active class from all tab buttons
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
    });
    
    // Show selected tab and mark button as active
    document.getElementById(tabName + '-tab').style.display = 'block';
    document.querySelector(`[onclick="showTab('${tabName}')"]`).classList.add('active');
    
    // Update URL hash for bookmarking
    window.location.hash = tabName;
}
```

MODAL DIALOG SYSTEM
--------------------

**Universal Modal Framework:**
The system uses a centralized modal system for all popup interactions:

```javascript
class ModalSystem {
    static confirm(message, title = 'Confirm') {
        return new Promise((resolve) => {
            const modal = document.getElementById('universal-modal');
            const content = modal.querySelector('.modal-content');
            
            content.innerHTML = `
                <h3>${title}</h3>
                <p>${message}</p>
                <div class="modal-buttons">
                    <button onclick="ModalSystem.resolveModal(true)">Yes</button>
                    <button onclick="ModalSystem.resolveModal(false)">No</button>
                </div>
            `;
            
            modal.style.display = 'block';
            this.currentResolve = resolve;
        });
    }
    
    static prompt(message, defaultValue = '', title = 'Input') {
        return new Promise((resolve) => {
            // Similar implementation for text input dialogs
        });
    }
}
```

**Modal Types:**
- **Confirmation**: Yes/No decisions for destructive actions
- **Input Prompt**: Text entry for names, values, descriptions
- **Item Selection**: Choose from lists of items or options
- **Information Display**: Show detailed item or character information
- **Error Messages**: Display validation errors and warnings

CHARACTER INTERFACE
--------------------

**Character List View:**
- **Grid Layout**: Character cards with portraits and basic info
- **Folder Organization**: Expandable folder structure
- **Quick Actions**: Load, delete, duplicate buttons on each card
- **Search/Filter**: Find characters by name, race, or folder
- **Sorting Options**: Alphabetical, by creation date, by last played

**Character Details Panel:**
```javascript
function renderCharacterDetails(character) {
    return `
        <div class="character-details">
            <div class="character-header">
                <h2>${character.name}</h2>
                <span class="race-badge">${character.race}</span>
            </div>
            
            <div class="stats-grid">
                <div class="stat-item">
                    <label>HP:</label>
                    <span>${character.hp}/${character.maxHp}</span>
                </div>
                <div class="stat-item">
                    <label>Stamina:</label>
                    <span>${character.stamina}/${character.maxStamina}</span>
                </div>
                <!-- Additional stats... -->
            </div>
            
            <div class="resources">
                <div class="lumens">
                    <span class="icon">💰</span>
                    <span class="value">${character.lumens} Lumens</span>
                </div>
            </div>
            
            <div class="equipment-summary">
                <!-- Equipment slots with equipped items -->
            </div>
        </div>
    `;
}
```

SKILLS INTERFACE
----------------

**Skill Tree Visualization:**
- **Hierarchical Display**: Skills organized by category and tier
- **Prerequisite Lines**: Visual connections showing unlock requirements
- **Color Coding**: Available (green), locked (gray), unlocked (blue)
- **Hover Tooltips**: Detailed skill information on mouse over
- **Search Integration**: Filter skills by name, category, or description

**Skill Categories Layout:**
```css
.skills-container {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 20px;
}

.skill-categories {
    background: var(--panel-background);
    padding: 15px;
    border-radius: 8px;
}

.skill-display {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.skill-tier {
    border: 2px solid var(--tier-color);
    border-radius: 8px;
    padding: 15px;
}
```

**Skill Unlock Process:**
1. **Skill Selection**: Click on available skill
2. **Confirmation Dialog**: Show cost and confirm purchase
3. **Prerequisite Check**: Validate requirements automatically
4. **Lumen Deduction**: Remove cost from character resources
5. **UI Update**: Refresh display to show new skill status

INVENTORY INTERFACE
-------------------

**Equipment Slots:**
- **Visual Equipment Display**: Character silhouette with equipment slots
- **Drag-and-Drop**: Move items between inventory and equipment slots
- **Stat Impact Display**: Show stat changes when hovering over items
- **Equipment Validation**: Prevent invalid equipment combinations
- **Quick Equip**: Double-click items to auto-equip in appropriate slots

**Inventory Grid:**
```javascript
function renderInventoryGrid(inventory) {
    return inventory.map(item => `
        <div class="inventory-item" data-item-id="${item.id}">
            <img src="${getItemIcon(item)}" alt="${item.name}">
            <div class="item-info">
                <div class="item-name">${item.name}</div>
                <div class="item-quantity">${item.quantity || 1}</div>
            </div>
            <div class="item-actions">
                <button onclick="equipItem('${item.id}')">Equip</button>
                <button onclick="examineItem('${item.id}')">Examine</button>
                <button onclick="dropItem('${item.id}')">Drop</button>
            </div>
        </div>
    `).join('');
}
```

SHOP INTERFACE
--------------

**Shop Categories:**
- **Tabbed Layout**: Separate tabs for weapons, armor, accessories, materials
- **Item Grid**: Consistent item display with prices and descriptions
- **Filtering Options**: Sort by price, type, stat bonuses
- **Purchase Confirmation**: Modal dialogs for all transactions
- **Lumen Balance**: Always visible current Lumen count

**Purchase Flow:**
1. **Item Selection**: Click on shop item to view details
2. **Stat Comparison**: Show how item compares to current equipment
3. **Purchase Confirmation**: Confirm cost and benefit
4. **Transaction Processing**: Deduct Lumens, add item to inventory
5. **UI Refresh**: Update displays to reflect changes

CRAFTING INTERFACE
------------------

**Recipe Browser:**
- **Category Tabs**: Smithing, Alchemy, Enchanting sections
- **Tier Filtering**: Show only accessible recipes
- **Material Requirements**: Clear display of needed components
- **Success Probability**: Show crafting success chances
- **Time Estimates**: Display crafting duration

**Crafting Process Visualization:**
```javascript
function startCraftingProcess(recipe) {
    const progressBar = document.getElementById('crafting-progress');
    const startTime = Date.now();
    const duration = recipe.craftingTime * 1000; // Convert to milliseconds
    
    const updateProgress = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        progressBar.style.width = (progress * 100) + '%';
        progressBar.textContent = Math.round(progress * 100) + '%';
        
        if (progress < 1) {
            requestAnimationFrame(updateProgress);
        } else {
            completeCrafting(recipe);
        }
    };
    
    updateProgress();
}
```

VISUAL THEMING SYSTEM
---------------------

**CSS Variable System:**
```css
:root {
    /* Primary Colors */
    --primary-purple: #6a0dad;
    --primary-purple-dark: #4a0a7a;
    --primary-purple-light: #8a2dcd;
    
    /* Background Colors */
    --background-dark: #1a1a2e;
    --panel-background: #16213e;
    --content-background: #0f3460;
    
    /* Text Colors */
    --text-primary: #ffffff;
    --text-secondary: #b0b0b0;
    --text-accent: #ffd700;
    
    /* State Colors */
    --success-color: #28a745;
    --error-color: #dc3545;
    --warning-color: #ffc107;
    --info-color: #17a2b8;
}
```

**Responsive Design:**
- **Mobile Breakpoints**: Responsive layouts for different screen sizes
- **Touch Interfaces**: Larger buttons and touch-friendly interactions
- **Flexible Grids**: Layouts adapt to available screen real estate
- **Font Scaling**: Text size adjusts based on screen resolution
- **Icon Consistency**: Scalable vector icons for all UI elements

ACCESSIBILITY FEATURES
-----------------------

**Keyboard Navigation:**
- **Tab Order**: Logical tab sequence through all interactive elements
- **Shortcut Keys**: Keyboard shortcuts for common actions
- **Focus Indicators**: Clear visual indication of focused elements
- **Modal Trapping**: Keyboard focus contained within open modals
- **Escape Handling**: ESC key closes modals and cancels operations

**Screen Reader Support:**
- **ARIA Labels**: Descriptive labels for all interactive elements
- **Role Attributes**: Proper semantic markup for complex UI components
- **Live Regions**: Announce dynamic content changes
- **Skip Links**: Allow users to skip repetitive navigation
- **Descriptive Text**: Alt text for all images and icons

PERFORMANCE CONSIDERATIONS
---------------------------

**Efficient Rendering:**
- **Virtual Scrolling**: Handle large lists without performance impact
- **Lazy Loading**: Load UI components only when needed
- **Debounced Updates**: Prevent excessive re-renders during rapid changes
- **Cached Calculations**: Store computed values to avoid repeated work
- **Minimal DOM Manipulation**: Batch DOM updates for efficiency

**Memory Management:**
- **Event Cleanup**: Remove event listeners when components unmount
- **Object Pooling**: Reuse UI components where possible
- **Garbage Collection**: Prevent memory leaks in long-running sessions
- **Resource Preloading**: Load critical assets during application startup
- **Image Optimization**: Use appropriate formats and sizes for icons

================================================================================
                        12. DATA PERSISTENCE & STORAGE
================================================================================

STORAGE ARCHITECTURE
---------------------
The system uses browser localStorage for client-side data persistence, 
providing immediate access without server dependencies.

**Storage Strategy:**
- **localStorage API**: Primary storage mechanism for all game data
- **JSON Serialization**: All data stored as JSON strings
- **Namespace Keys**: Organized key structure prevents conflicts
- **Automatic Backup**: Periodic snapshots for data recovery
- **Migration Support**: Handle data structure changes between versions

**Storage Keys Structure:**
```javascript
const STORAGE_KEYS = {
    CHARACTERS: 'rpg_characters',           // All character data
    ACTIVE_CHARACTER: 'rpg_active_character', // Currently selected character ID
    FOLDERS: 'rpg_character_folders',       // Folder organization
    SETTINGS: 'rpg_user_settings',          // User preferences
    NOTES: 'rpg_user_notes',               // Global notes data
    VERSION: 'rpg_data_version'             // Schema version tracking
};
```

CHARACTER DATA PERSISTENCE
---------------------------

**Character Storage Format:**
```javascript
// Stored in localStorage['rpg_characters']
const characterDatabase = {
    "char_12345": {
        // Complete character object as defined in character data structure
        id: "char_12345",
        name: "Thorek Ironbeard",
        race: "dwarf",
        // ... all character properties
    },
    "char_67890": {
        // Another character object
    }
    // ... additional characters
};
```

**Save Operations:**
```javascript
class DataPersistence {
    static saveCharacter(character) {
        try {
            // Get existing character database
            const characters = this.loadAllCharacters();
            
            // Update character with current timestamp
            character.lastSaved = new Date().toISOString();
            
            // Store updated character
            characters[character.id] = character;
            
            // Save back to localStorage
            localStorage.setItem(STORAGE_KEYS.CHARACTERS, JSON.stringify(characters));
            
            return true;
        } catch (error) {
            console.error('Failed to save character:', error);
            return false;
        }
    }
    
    static loadCharacter(characterId) {
        try {
            const characters = this.loadAllCharacters();
            return characters[characterId] || null;
        } catch (error) {
            console.error('Failed to load character:', error);
            return null;
        }
    }
    
    static loadAllCharacters() {
        try {
            const data = localStorage.getItem(STORAGE_KEYS.CHARACTERS);
            return data ? JSON.parse(data) : {};
        } catch (error) {
            console.error('Failed to load character database:', error);
            return {};
        }
    }
}
```

**Auto-Save Functionality:**
- **Immediate Saves**: Critical changes saved immediately
- **Periodic Backups**: Full character data saved every 5 minutes
- **Action Triggers**: Save after skill unlocks, equipment changes, level ups
- **Browser Events**: Save before page unload/refresh
- **Error Recovery**: Maintain multiple save slots for corruption recovery

FOLDER ORGANIZATION PERSISTENCE
--------------------------------

**Folder Structure Storage:**
```javascript
// Stored in localStorage['rpg_character_folders']
const folderStructure = {
    "folders": [
        {
            id: "folder_1",
            name: "Campaign 1",
            parent: null,
            characters: ["char_12345", "char_67890"]
        },
        {
            id: "folder_2", 
            name: "NPCs",
            parent: "folder_1",
            characters: ["char_11111"]
        }
    ],
    "characterFolderMap": {
        "char_12345": "folder_1",
        "char_67890": "folder_1", 
        "char_11111": "folder_2"
    }
};
```

**Folder Operations:**
- **Creation**: Generate unique folder IDs and update structure
- **Deletion**: Move characters to parent folder or default
- **Moving Characters**: Update character-folder mappings
- **Nested Folders**: Support hierarchical organization
- **Validation**: Ensure referential integrity between folders and characters

NOTES SYSTEM PERSISTENCE
-------------------------

**Notes Data Structure:**
```javascript
// Stored in localStorage['rpg_user_notes']
const notesData = {
    content: "# Campaign Notes\n\n## Session 1\n- Party met in tavern...",
    lastModified: "2025-08-13T15:30:00Z",
    autoSaveEnabled: true,
    characterCount: 1247,
    version: 1
};
```

**Auto-Save Implementation:**
```javascript
class NotesManager {
    constructor() {
        this.autoSaveInterval = null;
        this.hasUnsavedChanges = false;
        this.setupAutoSave();
    }
    
    setupAutoSave() {
        // Save every 30 seconds if there are changes
        this.autoSaveInterval = setInterval(() => {
            if (this.hasUnsavedChanges) {
                this.saveNotes();
                this.hasUnsavedChanges = false;
            }
        }, 30000);
        
        // Save before page unload
        window.addEventListener('beforeunload', () => {
            if (this.hasUnsavedChanges) {
                this.saveNotes();
            }
        });
    }
    
    onNotesChange() {
        this.hasUnsavedChanges = true;
        this.updateCharacterCount();
    }
}
```

DATA MIGRATION & VERSIONING
----------------------------

**Version Management:**
```javascript
class DataMigration {
    static CURRENT_VERSION = "1.2.0";
    
    static migrateData() {
        const currentVersion = localStorage.getItem(STORAGE_KEYS.VERSION);
        
        if (!currentVersion) {
            // First time user, set current version
            localStorage.setItem(STORAGE_KEYS.VERSION, this.CURRENT_VERSION);
            return;
        }
        
        if (this.isVersionOlder(currentVersion, this.CURRENT_VERSION)) {
            this.performMigration(currentVersion);
        }
    }
    
    static performMigration(fromVersion) {
        const migrations = {
            "1.0.0": this.migrateFrom1_0_0,
            "1.1.0": this.migrateFrom1_1_0
        };
        
        // Apply migrations in sequence
        for (const [version, migrationFunc] of Object.entries(migrations)) {
            if (this.isVersionOlder(fromVersion, version)) {
                migrationFunc();
            }
        }
        
        localStorage.setItem(STORAGE_KEYS.VERSION, this.CURRENT_VERSION);
    }
}
```

**Migration Examples:**
- **Character Schema Changes**: Add new properties with default values
- **Skill System Updates**: Migrate old skill IDs to new system
- **Equipment Changes**: Update item structures and properties
- **Folder System Addition**: Organize existing characters into default folder
- **Notes System Addition**: Create empty notes structure for existing users

ERROR HANDLING & RECOVERY
--------------------------

**Storage Quota Management:**
```javascript
class StorageManager {
    static checkStorageQuota() {
        try {
            const testKey = '_storage_test_';
            const testData = new Array(1024).join('a'); // 1KB test
            
            localStorage.setItem(testKey, testData);
            localStorage.removeItem(testKey);
            
            return true;
        } catch (error) {
            if (error.name === 'QuotaExceededError') {
                this.handleQuotaExceeded();
            }
            return false;
        }
    }
    
    static handleQuotaExceeded() {
        // Cleanup old data or prompt user to export data
        const warningMessage = `
            Storage quota exceeded! Please consider:
            1. Exporting/backing up character data
            2. Deleting unused characters
            3. Clearing browser cache
        `;
        alert(warningMessage);
    }
}
```

**Corruption Detection:**
```javascript
static validateCharacterData(character) {
    const requiredFields = ['id', 'name', 'race', 'stats', 'lumens'];
    
    for (const field of requiredFields) {
        if (!(field in character)) {
            throw new Error(`Missing required field: ${field}`);
        }
    }
    
    // Type validation
    if (typeof character.lumens !== 'number' || character.lumens < 0) {
        throw new Error('Invalid lumens value');
    }
    
    // Stats validation
    const stats = character.stats;
    const statFields = ['hp', 'stamina', 'strength', 'magicPower', 'accuracy'];
    for (const stat of statFields) {
        if (typeof stats[stat] !== 'number') {
            throw new Error(`Invalid stat value: ${stat}`);
        }
    }
    
    return true;
}
```

BACKUP & EXPORT SYSTEM
-----------------------

**Export Functionality:**
```javascript
class DataExport {
    static exportAllData() {
        const exportData = {
            version: DataMigration.CURRENT_VERSION,
            exportDate: new Date().toISOString(),
            characters: DataPersistence.loadAllCharacters(),
            folders: JSON.parse(localStorage.getItem(STORAGE_KEYS.FOLDERS) || '{}'),
            notes: JSON.parse(localStorage.getItem(STORAGE_KEYS.NOTES) || '{}'),
            settings: JSON.parse(localStorage.getItem(STORAGE_KEYS.SETTINGS) || '{}')
        };
        
        const dataBlob = new Blob([JSON.stringify(exportData, null, 2)], {
            type: 'application/json'
        });
        
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(dataBlob);
        downloadLink.download = `rpg_backup_${new Date().toISOString().split('T')[0]}.json`;
        downloadLink.click();
    }
    
    static importData(fileContent) {
        try {
            const importData = JSON.parse(fileContent);
            
            // Validate import data structure
            this.validateImportData(importData);
            
            // Backup current data before import
            this.createRestorePoint();
            
            // Import each data category
            localStorage.setItem(STORAGE_KEYS.CHARACTERS, JSON.stringify(importData.characters));
            localStorage.setItem(STORAGE_KEYS.FOLDERS, JSON.stringify(importData.folders));
            localStorage.setItem(STORAGE_KEYS.NOTES, JSON.stringify(importData.notes));
            localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(importData.settings));
            
            return true;
        } catch (error) {
            console.error('Import failed:', error);
            return false;
        }
    }
}
```

PERFORMANCE OPTIMIZATION
-------------------------

**Lazy Loading:**
- **Character Lists**: Load character metadata without full character data
- **Skill Trees**: Load skill information only when skills tab is active
- **Equipment Data**: Load item details on demand
- **Notes Content**: Load notes only when notes tab is accessed

**Caching Strategy:**
```javascript
class DataCache {
    constructor() {
        this.cache = new Map();
        this.cacheExpiry = new Map();
        this.DEFAULT_EXPIRY = 5 * 60 * 1000; // 5 minutes
    }
    
    get(key) {
        if (this.isExpired(key)) {
            this.cache.delete(key);
            this.cacheExpiry.delete(key);
            return null;
        }
        
        return this.cache.get(key);
    }
    
    set(key, value, expiry = this.DEFAULT_EXPIRY) {
        this.cache.set(key, value);
        this.cacheExpiry.set(key, Date.now() + expiry);
    }
    
    isExpired(key) {
        const expiry = this.cacheExpiry.get(key);
        return expiry && Date.now() > expiry;
    }
}
```

**Batch Operations:**
- **Multiple Character Updates**: Save all changes in single operation
- **Bulk Equipment Changes**: Process equipment swaps together
- **Skill Unlock Batches**: Handle multiple skill purchases efficiently
- **Status Effect Updates**: Apply all effect changes simultaneously

================================================================================
                        13. DEVELOPER MODE & DEBUGGING TOOLS
================================================================================

DEVELOPER MODE OVERVIEW
------------------------
Developer mode provides advanced tools for testing, debugging, and content 
creation. It's designed for developers, game masters, and power users who need 
deeper access to system functionality.

**Activation Methods:**
- **Console Command**: `enableDevMode()` in browser console
- **URL Parameter**: Add `?dev=true` to URL
- **Settings Toggle**: Hidden option in user settings (when available)
- **Local Storage**: Set `rpg_dev_mode` to `true`

**Developer Mode Features:**
- **Character Manipulation**: Direct stat and resource editing
- **Item Generation**: Create custom items and equipment
- **Monster Creation**: Build and test custom monsters
- **Skill Unlocking**: Bypass prerequisites and costs
- **Data Export/Import**: Advanced data management tools
- **Performance Monitoring**: System performance metrics
- **Error Logging**: Enhanced error reporting and debugging

CHARACTER DEBUGGING TOOLS
--------------------------

**Stat Manipulation Interface:**
```javascript
class DevCharacterTools {
    static renderDevPanel(character) {
        return `
            <div class="dev-panel">
                <h3>Developer Tools - ${character.name}</h3>
                
                <div class="dev-section">
                    <h4>Direct Stat Editing</h4>
                    <div class="stat-editors">
                        <label>HP: <input type="number" value="${character.stats.hp}" 
                               onchange="DevCharacterTools.setStat('${character.id}', 'hp', this.value)"></label>
                        <label>Lumens: <input type="number" value="${character.lumens}"
                               onchange="DevCharacterTools.setLumens('${character.id}', this.value)"></label>
                        <label>Strength: <input type="number" value="${character.stats.strength}"
                               onchange="DevCharacterTools.setStat('${character.id}', 'strength', this.value)"></label>
                        <!-- Additional stat editors... -->
                    </div>
                </div>
                
                <div class="dev-section">
                    <h4>Skill Management</h4>
                    <button onclick="DevCharacterTools.unlockAllSkills('${character.id}')">
                        Unlock All Skills
                    </button>
                    <button onclick="DevCharacterTools.resetSkills('${character.id}')">
                        Reset All Skills
                    </button>
                    <button onclick="DevCharacterTools.giveMaxLumens('${character.id}')">
                        Give 10,000 Lumens
                    </button>
                </div>
                
                <div class="dev-section">
                    <h4>Race Management</h4>
                    <button onclick="DevCharacterTools.removeCharacterRace('${character.id}')" 
                            class="dev-danger-button">
                        Remove Race (Debug)
                    </button>
                    <select onchange="DevCharacterTools.changeRace('${character.id}', this.value)">
                        <option value="">Change Race...</option>
                        <option value="human">Human</option>
                        <option value="elf">Elf</option>
                        <option value="dwarf">Dwarf</option>
                        <!-- Additional race options... -->
                    </select>
                </div>
            </div>
        `;
    }
    
    static setStat(characterId, statName, value) {
        const character = characterManager.getCharacter(characterId);
        if (character) {
            character.stats[statName] = parseInt(value);
            characterManager.saveCharacter(character);
            uiComponents.updateDisplay();
            console.log(`Set ${character.name}'s ${statName} to ${value}`);
        }
    }
    
    static removeCharacterRace(characterId) {
        if (!confirm('This will remove the character\'s race and racial abilities. Continue?')) {
            return;
        }
        
        const character = characterManager.getCharacter(characterId);
        if (character) {
            // Remove race
            character.race = null;
            
            // Remove racial abilities
            character.racialAbilities = {};
            character.racialPassiveTraits = [];
            
            // Remove racial skills
            if (character.unlockedSkills.racial) {
                character.unlockedSkills.racial = {};
            }
            
            characterManager.saveCharacter(character);
            uiComponents.updateDisplay();
            console.log(`Removed race from ${character.name}`);
        }
    }
}
```

ITEM & EQUIPMENT DEBUGGING
---------------------------

**Custom Item Creator:**
```javascript
class DevItemTools {
    static createCustomItem() {
        const itemData = {
            id: `custom_${Date.now()}`,
            name: prompt('Item Name:', 'Custom Item'),
            description: prompt('Item Description:', 'A custom created item'),
            category: prompt('Category (weapon/armor/accessory):', 'weapon'),
            type: prompt('Type:', 'sword'),
            stats: {
                damage: parseInt(prompt('Damage:', '10')) || 0,
                armor: parseInt(prompt('Armor:', '0')) || 0,
                strength: parseInt(prompt('Strength Bonus:', '0')) || 0,
                magicPower: parseInt(prompt('Magic Power Bonus:', '0')) || 0,
                accuracy: parseInt(prompt('Accuracy Bonus:', '0')) || 0
            },
            value: parseInt(prompt('Value in Lumens:', '100')) || 100,
            rarity: prompt('Rarity (common/uncommon/rare/epic/legendary):', 'common')
        };
        
        // Add to current character's inventory
        const character = characterManager.getCurrentCharacter();
        if (character) {
            character.inventory.push({ 
                id: itemData.id, 
                quantity: 1, 
                equipped: false,
                customData: itemData 
            });
            characterManager.saveCharacter(character);
            uiComponents.updateDisplay();
            console.log('Created custom item:', itemData);
        }
    }
    
    static giveAllItems(characterId) {
        const character = characterManager.getCharacter(characterId);
        if (!character) return;
        
        // Add one of every item in the game
        const allItems = getAllItemIds(); // Function to get all available items
        allItems.forEach(itemId => {
            const existingItem = character.inventory.find(inv => inv.id === itemId);
            if (existingItem) {
                existingItem.quantity = (existingItem.quantity || 1) + 1;
            } else {
                character.inventory.push({ id: itemId, quantity: 1, equipped: false });
            }
        });
        
        characterManager.saveCharacter(character);
        uiComponents.updateDisplay();
        console.log(`Gave all items to ${character.name}`);
    }
}
```

MONSTER DEBUGGING TOOLS
------------------------

**Monster Test Arena:**
```javascript
class DevMonsterTools {
    static openTestArena() {
        const arenaHTML = `
            <div class="dev-arena">
                <h3>Monster Test Arena</h3>
                
                <div class="monster-creation">
                    <h4>Create Test Monster</h4>
                    <select id="monster-template">
                        <option value="goblin">Goblin Scout</option>
                        <option value="troll">Troll Berserker</option>
                        <option value="dragon">Fire Dragon</option>
                        <option value="custom">Custom Monster</option>
                    </select>
                    <button onclick="DevMonsterTools.createMonster()">Create Monster</button>
                </div>
                
                <div class="combat-simulation">
                    <h4>Combat Simulation</h4>
                    <div id="combat-log"></div>
                    <button onclick="DevMonsterTools.startCombat()">Start Combat</button>
                    <button onclick="DevMonsterTools.endCombat()">End Combat</button>
                </div>
                
                <div class="monster-stats">
                    <h4>Monster Statistics</h4>
                    <div id="monster-stats-display"></div>
                </div>
            </div>
        `;
        
        document.getElementById('dev-content').innerHTML = arenaHTML;
    }
    
    static createMonster() {
        const template = document.getElementById('monster-template').value;
        
        if (template === 'custom') {
            this.createCustomMonster();
        } else {
            this.createTemplateMonster(template);
        }
    }
    
    static createCustomMonster() {
        const monster = {
            id: `custom_monster_${Date.now()}`,
            name: prompt('Monster Name:', 'Custom Monster'),
            stats: {
                hp: parseInt(prompt('HP:', '50')) || 50,
                strength: parseInt(prompt('Strength:', '5')) || 5,
                magicPower: parseInt(prompt('Magic Power:', '0')) || 0,
                accuracy: parseInt(prompt('Accuracy:', '3')) || 3,
                speed: parseInt(prompt('Speed:', '2')) || 2,
                physicalDefence: parseInt(prompt('Physical Defence:', '10')) || 10,
                magicalDefence: parseInt(prompt('Magical Defence:', '10')) || 10
            },
            abilities: [],
            lootTable: [],
            challengeRating: parseInt(prompt('Challenge Rating (1-20):', '5')) || 5
        };
        
        console.log('Created custom monster:', monster);
        return monster;
    }
}
```

SYSTEM MONITORING TOOLS
------------------------

**Performance Monitor:**
```javascript
class DevPerformanceMonitor {
    constructor() {
        this.metrics = {
            renderTimes: [],
            saveOperations: [],
            loadOperations: [],
            memoryUsage: []
        };
        this.isMonitoring = false;
    }
    
    startMonitoring() {
        this.isMonitoring = true;
        this.monitorLoop();
        console.log('Performance monitoring started');
    }
    
    monitorLoop() {
        if (!this.isMonitoring) return;
        
        // Measure memory usage
        if (performance.memory) {
            this.metrics.memoryUsage.push({
                timestamp: Date.now(),
                used: performance.memory.usedJSHeapSize,
                total: performance.memory.totalJSHeapSize
            });
        }
        
        // Measure localStorage usage
        const storageSize = this.calculateStorageSize();
        this.metrics.storageUsage = storageSize;
        
        // Schedule next measurement
        setTimeout(() => this.monitorLoop(), 5000); // Every 5 seconds
    }
    
    calculateStorageSize() {
        let totalSize = 0;
        for (let key in localStorage) {
            if (localStorage.hasOwnProperty(key)) {
                totalSize += localStorage[key].length;
            }
        }
        return totalSize;
    }
    
    generateReport() {
        return {
            averageRenderTime: this.calculateAverage(this.metrics.renderTimes),
            averageSaveTime: this.calculateAverage(this.metrics.saveOperations),
            averageLoadTime: this.calculateAverage(this.metrics.loadOperations),
            currentMemoryUsage: this.metrics.memoryUsage[this.metrics.memoryUsage.length - 1],
            storageUsage: `${(this.metrics.storageUsage / 1024).toFixed(2)} KB`
        };
    }
}
```

**Error Logging System:**
```javascript
class DevErrorLogger {
    constructor() {
        this.errors = [];
        this.setupErrorHandling();
    }
    
    setupErrorHandling() {
        // Global error handler
        window.addEventListener('error', (event) => {
            this.logError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                line: event.lineno,
                column: event.colno,
                stack: event.error ? event.error.stack : null,
                timestamp: new Date().toISOString()
            });
        });
        
        // Promise rejection handler
        window.addEventListener('unhandledrejection', (event) => {
            this.logError({
                type: 'Unhandled Promise Rejection',
                message: event.reason.toString(),
                stack: event.reason.stack,
                timestamp: new Date().toISOString()
            });
        });
    }
    
    logError(errorData) {
        this.errors.push(errorData);
        console.error('Logged error:', errorData);
        
        // Keep only last 100 errors
        if (this.errors.length > 100) {
            this.errors.shift();
        }
        
        this.updateErrorDisplay();
    }
    
    exportErrorLog() {
        const errorBlob = new Blob([JSON.stringify(this.errors, null, 2)], {
            type: 'application/json'
        });
        
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(errorBlob);
        downloadLink.download = `error_log_${new Date().toISOString().split('T')[0]}.json`;
        downloadLink.click();
    }
}
```

DATA MANIPULATION TOOLS
------------------------

**Advanced Data Editor:**
```javascript
class DevDataEditor {
    static openDataEditor() {
        const editorHTML = `
            <div class="dev-data-editor">
                <h3>Advanced Data Editor</h3>
                
                <div class="data-source-selector">
                    <select id="data-source" onchange="DevDataEditor.loadDataSource()">
                        <option value="">Select Data Source...</option>
                        <option value="characters">Character Database</option>
                        <option value="folders">Folder Structure</option>
                        <option value="notes">Notes Data</option>
                        <option value="settings">User Settings</option>
                    </select>
                </div>
                
                <div class="data-editor-container">
                    <textarea id="data-editor" rows="20" cols="80" 
                              placeholder="Select a data source to edit..."></textarea>
                </div>
                
                <div class="editor-controls">
                    <button onclick="DevDataEditor.validateData()">Validate JSON</button>
                    <button onclick="DevDataEditor.saveData()">Save Changes</button>
                    <button onclick="DevDataEditor.revertChanges()">Revert</button>
                    <button onclick="DevDataEditor.exportData()">Export</button>
                </div>
                
                <div id="validation-results"></div>
            </div>
        `;
        
        document.getElementById('dev-content').innerHTML = editorHTML;
    }
    
    static validateData() {
        const editor = document.getElementById('data-editor');
        const results = document.getElementById('validation-results');
        
        try {
            JSON.parse(editor.value);
            results.innerHTML = '<span style="color: green">✓ Valid JSON</span>';
        } catch (error) {
            results.innerHTML = `<span style="color: red">✗ Invalid JSON: ${error.message}</span>`;
        }
    }
}
```

CONSOLE COMMAND INTERFACE
--------------------------

**Developer Console Commands:**
```javascript
// Global developer functions available in browser console
window.devCommands = {
    // Character manipulation
    giveCharacterLumens: (characterId, amount) => {
        const character = characterManager.getCharacter(characterId);
        if (character) {
            character.lumens += amount;
            characterManager.saveCharacter(character);
            console.log(`Gave ${amount} lumens to ${character.name}`);
        }
    },
    
    // Skill manipulation  
    unlockSkill: (characterId, skillId) => {
        const character = characterManager.getCharacter(characterId);
        if (character) {
            characterManager.unlockSkill(character, skillId, true); // Force unlock
            console.log(`Unlocked ${skillId} for ${character.name}`);
        }
    },
    
    // Data manipulation
    clearAllData: () => {
        if (confirm('This will delete ALL game data. Are you sure?')) {
            localStorage.clear();
            location.reload();
        }
    },
    
    // Performance testing
    stressTest: (iterations = 1000) => {
        console.time('Stress Test');
        for (let i = 0; i < iterations; i++) {
            // Perform intensive operations
            const character = characterManager.getCurrentCharacter();
            characterManager.saveCharacter(character);
        }
        console.timeEnd('Stress Test');
    }
};

// Make dev commands easily accessible
if (typeof enableDevMode === 'undefined') {
    window.enableDevMode = () => {
        localStorage.setItem('rpg_dev_mode', 'true');
        location.reload();
    };
}
```

================================================================================
                        14. NOTES SYSTEM & USER EXPERIENCE
================================================================================

NOTES SYSTEM OVERVIEW
----------------------
The notes system provides players with a comprehensive tool for campaign 
documentation, character backstories, and session tracking. It emphasizes:

- **Markdown Support**: Rich text formatting for organized notes
- **Auto-Save Functionality**: Prevents data loss during long sessions
- **Character Count Tracking**: Monitor document length and organization
- **Persistent Storage**: Notes saved locally with the character data
- **User-Friendly Interface**: Clean, distraction-free writing environment

NOTES INTERFACE DESIGN
-----------------------

**Tab Integration:**
The notes system integrates seamlessly with the main navigation:

```javascript
// Notes tab HTML structure
const notesTabHTML = `
    <div id="notes-tab" class="tab-content" style="display: none;">
        <div class="notes-container">
            <div class="notes-header">
                <h2>Campaign Notes</h2>
                <div class="notes-controls">
                    <span id="character-count">0 characters</span>
                    <button id="save-notes-btn" onclick="saveNotes()">Save Notes</button>
                    <button id="clear-notes-btn" onclick="clearNotes()">Clear All</button>
                </div>
            </div>
            
            <div class="notes-editor">
                <textarea id="notes-textarea" 
                          placeholder="Write your campaign notes here... Supports Markdown formatting!"
                          oninput="onNotesChange()"></textarea>
            </div>
            
            <div class="notes-footer">
                <div class="auto-save-status">
                    <span id="auto-save-indicator">Auto-save: On</span>
                    <span id="last-saved">Last saved: Never</span>
                </div>
            </div>
        </div>
    </div>
`;
```

**CSS Styling:**
```css
.notes-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
    height: calc(100vh - 120px);
    display: flex;
    flex-direction: column;
}

.notes-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid var(--primary-purple);
}

.notes-controls {
    display: flex;
    gap: 15px;
    align-items: center;
}

#character-count {
    color: var(--text-secondary);
    font-size: 0.9em;
}

.notes-editor {
    flex: 1;
    display: flex;
    flex-direction: column;
}

#notes-textarea {
    flex: 1;
    min-height: 400px;
    padding: 15px;
    background: var(--content-background);
    color: var(--text-primary);
    border: 2px solid var(--primary-purple-dark);
    border-radius: 8px;
    font-family: 'Consolas', 'Monaco', monospace;
    font-size: 14px;
    line-height: 1.6;
    resize: vertical;
}

.notes-footer {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid var(--primary-purple-dark);
}

.auto-save-status {
    display: flex;
    justify-content: space-between;
    color: var(--text-secondary);
    font-size: 0.9em;
}
```

AUTO-SAVE IMPLEMENTATION
-------------------------

**Auto-Save Mechanics:**
```javascript
class NotesManager {
    constructor() {
        this.autoSaveEnabled = true;
        this.autoSaveInterval = 30000; // 30 seconds
        this.hasUnsavedChanges = false;
        this.lastSaveTime = null;
        this.setupAutoSave();
    }
    
    setupAutoSave() {
        // Auto-save timer
        setInterval(() => {
            if (this.hasUnsavedChanges && this.autoSaveEnabled) {
                this.saveNotes(true); // Silent auto-save
            }
        }, this.autoSaveInterval);
        
        // Save before page unload
        window.addEventListener('beforeunload', (event) => {
            if (this.hasUnsavedChanges) {
                this.saveNotes(true);
                // Note: Modern browsers may not show custom messages
                event.returnValue = 'You have unsaved notes. Are you sure you want to leave?';
            }
        });
        
        // Save on visibility change (tab switching, minimizing)
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && this.hasUnsavedChanges) {
                this.saveNotes(true);
            }
        });
    }
    
    onNotesChange() {
        this.hasUnsavedChanges = true;
        this.updateCharacterCount();
        this.updateAutoSaveIndicator();
    }
    
    updateCharacterCount() {
        const textarea = document.getElementById('notes-textarea');
        const countElement = document.getElementById('character-count');
        
        if (textarea && countElement) {
            const count = textarea.value.length;
            countElement.textContent = `${count.toLocaleString()} characters`;
            
            // Color coding for length
            if (count > 10000) {
                countElement.style.color = 'var(--warning-color)';
            } else if (count > 5000) {
                countElement.style.color = 'var(--info-color)';
            } else {
                countElement.style.color = 'var(--text-secondary)';
            }
        }
    }
}
```

**Save Operations:**
```javascript
function saveNotes(isAutoSave = false) {
    const textarea = document.getElementById('notes-textarea');
    const lastSavedElement = document.getElementById('last-saved');
    
    if (!textarea) return;
    
    try {
        // Prepare notes data
        const notesData = {
            content: textarea.value,
            lastModified: new Date().toISOString(),
            characterCount: textarea.value.length,
            autoSaveEnabled: notesManager.autoSaveEnabled
        };
        
        // Save to localStorage
        localStorage.setItem('rpg_user_notes', JSON.stringify(notesData));
        
        // Update UI
        notesManager.hasUnsavedChanges = false;
        notesManager.lastSaveTime = new Date();
        
        if (lastSavedElement) {
            const timeString = notesManager.lastSaveTime.toLocaleTimeString();
            lastSavedElement.textContent = `Last saved: ${timeString}`;
        }
        
        // Show save confirmation (only for manual saves)
        if (!isAutoSave) {
            showMessage('Notes saved successfully!', 'success');
        }
        
        console.log('Notes saved:', isAutoSave ? '(auto-save)' : '(manual)');
        
    } catch (error) {
        console.error('Failed to save notes:', error);
        showMessage('Failed to save notes. Please try again.', 'error');
    }
}

function loadNotes() {
    try {
        const savedData = localStorage.getItem('rpg_user_notes');
        
        if (savedData) {
            const notesData = JSON.parse(savedData);
            const textarea = document.getElementById('notes-textarea');
            
            if (textarea) {
                textarea.value = notesData.content || '';
                notesManager.updateCharacterCount();
                
                // Update last saved indicator
                if (notesData.lastModified) {
                    const lastModified = new Date(notesData.lastModified);
                    const lastSavedElement = document.getElementById('last-saved');
                    if (lastSavedElement) {
                        lastSavedElement.textContent = `Last saved: ${lastModified.toLocaleTimeString()}`;
                    }
                }
            }
        }
    } catch (error) {
        console.error('Failed to load notes:', error);
        showMessage('Failed to load notes.', 'error');
    }
}
```

ACCESSIBILITY & USABILITY
--------------------------

**Responsive Design:**
- **Mobile Support**: Touch-friendly interface for tablet use
- **Font Scaling**: Adjustable text size for readability
- **High Contrast**: Clear color distinctions for visibility
- **Screen Reader**: Proper labels and ARIA attributes

**Performance Optimization:**
- **Debounced Auto-Save**: Prevent excessive save operations
- **Lazy Loading**: Load notes content only when tab is accessed
- **Efficient Updates**: Minimize DOM manipulation during typing
- **Memory Management**: Clean up event listeners properly

================================================================================
                        15. TECHNICAL IMPLEMENTATION DETAILS
================================================================================

CORE ARCHITECTURE PATTERNS
---------------------------

**Modular Design Principles:**
The system follows a component-based architecture where each major feature 
exists as an independent module with clear interfaces:

```javascript
// Core System Architecture
const RPGSystem = {
    // Core modules
    characterManager: new CharacterManager(),
    skillSystem: new SkillSystem(),
    inventorySystem: new InventorySystem(),
    combatEngine: new CombatEngine(),
    modalSystem: new ModalSystem(),
    storageManager: new StorageManager(),
    
    // Initialize all systems
    initialize() {
        console.log('Initializing RPG System...');
        
        // Setup event listeners
        this.setupEventDelegation();
        
        // Initialize individual systems
        this.characterManager.initialize();
        this.skillSystem.initialize();
        this.inventorySystem.initialize();
        this.modalSystem.initialize();
        
        // Load saved data
        this.loadGameState();
        
        console.log('RPG System initialization complete');
    }
};
```

**Event System Architecture:**
```javascript
class EventEmitter {
    constructor() {
        this.events = new Map();
    }
    
    on(event, callback) {
        if (!this.events.has(event)) {
            this.events.set(event, []);
        }
        this.events.get(event).push(callback);
    }
    
    emit(event, data) {
        if (this.events.has(event)) {
            this.events.get(event).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Error in event handler for ${event}:`, error);
                }
            });
        }
    }
    
    off(event, callback) {
        if (this.events.has(event)) {
            const callbacks = this.events.get(event);
            const index = callbacks.indexOf(callback);
            if (index > -1) {
                callbacks.splice(index, 1);
            }
        }
    }
}

// Global event bus for system communication
const gameEvents = new EventEmitter();

// Example usage across systems
gameEvents.on('character.levelUp', (data) => {
    console.log(`${data.character.name} reached level ${data.newLevel}!`);
    skillSystem.checkNewSkillAvailability(data.character);
    uiSystem.showLevelUpNotification(data);
});
```

DATA FLOW ARCHITECTURE
-----------------------

**State Management Pattern:**
```javascript
class GameStateManager {
    constructor() {
        this.state = {
            currentCharacter: null,
            gameSettings: {},
            uiState: {},
            systemFlags: {}
        };
        this.subscribers = new Set();
    }
    
    subscribe(callback) {
        this.subscribers.add(callback);
        return () => this.subscribers.delete(callback);
    }
    
    setState(updates) {
        const previousState = { ...this.state };
        this.state = { ...this.state, ...updates };
        
        // Notify all subscribers of state changes
        this.subscribers.forEach(callback => {
            try {
                callback(this.state, previousState);
            } catch (error) {
                console.error('Error in state subscriber:', error);
            }
        });
        
        // Auto-save critical state changes
        this.saveState();
    }
    
    getState() {
        return { ...this.state }; // Return copy to prevent mutations
    }
    
    saveState() {
        try {
            const saveData = {
                gameSettings: this.state.gameSettings,
                uiState: this.state.uiState,
                timestamp: new Date().toISOString()
            };
            localStorage.setItem('rpg_game_state', JSON.stringify(saveData));
        } catch (error) {
            console.error('Failed to save game state:', error);
        }
    }
}

const gameState = new GameStateManager();
```

**Data Validation Framework:**
```javascript
class DataValidator {
    static validateCharacter(character) {
        const errors = [];
        
        // Name validation
        if (!character.name || character.name.trim().length === 0) {
            errors.push('Character name is required');
        } else if (character.name.length > 50) {
            errors.push('Character name must be 50 characters or less');
        }
        
        // Race validation
        if (!character.race || !racesData[character.race]) {
            errors.push('Invalid race selected');
        }
        
        // Stats validation
        const requiredStats = ['hp', 'maxHp', 'stamina', 'maxStamina', 'lumens'];
        requiredStats.forEach(stat => {
            if (typeof character[stat] !== 'number' || character[stat] < 0) {
                errors.push(`Invalid ${stat} value`);
            }
        });
        
        // Skills validation
        if (character.skills) {
            Object.entries(character.skills).forEach(([skillId, level]) => {
                if (!skillsData[skillId]) {
                    errors.push(`Unknown skill: ${skillId}`);
                } else if (typeof level !== 'number' || level < 0 || level > 5) {
                    errors.push(`Invalid level for skill ${skillId}: ${level}`);
                }
            });
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }
    
    static validateItem(item) {
        // Similar validation for items
        const errors = [];
        
        if (!item.id || !item.name) {
            errors.push('Item must have id and name');
        }
        
        if (!item.type || !['weapon', 'armor', 'accessory', 'consumable', 'misc'].includes(item.type)) {
            errors.push('Invalid item type');
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }
}
```

PERFORMANCE OPTIMIZATION STRATEGIES
------------------------------------

**Lazy Loading Implementation:**
```javascript
class LazyLoader {
    constructor() {
        this.loadedModules = new Set();
        this.loadingPromises = new Map();
    }
    
    async loadModule(moduleName) {
        // Prevent duplicate loading
        if (this.loadedModules.has(moduleName)) {
            return true;
        }
        
        // Return existing promise if already loading
        if (this.loadingPromises.has(moduleName)) {
            return this.loadingPromises.get(moduleName);
        }
        
        const loadPromise = this.performLoad(moduleName);
        this.loadingPromises.set(moduleName, loadPromise);
        
        try {
            await loadPromise;
            this.loadedModules.add(moduleName);
            this.loadingPromises.delete(moduleName);
            return true;
        } catch (error) {
            this.loadingPromises.delete(moduleName);
            console.error(`Failed to load module ${moduleName}:`, error);
            return false;
        }
    }
    
    async performLoad(moduleName) {
        const loadFunctions = {
            'monster-system': () => this.loadMonsterData(),
            'advanced-crafting': () => this.loadCraftingSystem(),
            'dice-roller': () => this.loadDiceRoller(),
            'notes-system': () => this.loadNotesSystem()
        };
        
        const loadFunction = loadFunctions[moduleName];
        if (loadFunction) {
            await loadFunction();
        } else {
            throw new Error(`Unknown module: ${moduleName}`);
        }
    }
    
    async loadMonsterData() {
        // Dynamically load monster presets only when needed
        if (!window.monsterPresets) {
            const script = document.createElement('script');
            script.src = './monster-presets.js';
            document.head.appendChild(script);
            
            await new Promise((resolve, reject) => {
                script.onload = resolve;
                script.onerror = reject;
            });
        }
    }
}

const lazyLoader = new LazyLoader();
```

**Debouncing and Throttling:**
```javascript
class PerformanceUtils {
    static debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }
    
    static throttle(func, limit) {
        let inThrottle;
        return function (...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
    
    // Specialized for character auto-save
    static debouncedSave = this.debounce((character) => {
        characterManager.saveCharacter(character);
    }, 2000);
    
    // Specialized for search functionality
    static throttledSearch = this.throttle((query) => {
        inventorySystem.performSearch(query);
    }, 300);
}
```

MEMORY MANAGEMENT
-----------------

**Object Pool Pattern for Frequent Allocations:**
```javascript
class ObjectPool {
    constructor(createFn, resetFn, initialSize = 10) {
        this.createFn = createFn;
        this.resetFn = resetFn;
        this.pool = [];
        this.activeObjects = new Set();
        
        // Pre-populate pool
        for (let i = 0; i < initialSize; i++) {
            this.pool.push(this.createFn());
        }
    }
    
    acquire() {
        let obj = this.pool.pop();
        if (!obj) {
            obj = this.createFn();
        }
        this.activeObjects.add(obj);
        return obj;
    }
    
    release(obj) {
        if (this.activeObjects.has(obj)) {
            this.activeObjects.delete(obj);
            this.resetFn(obj);
            this.pool.push(obj);
        }
    }
    
    clear() {
        this.pool.length = 0;
        this.activeObjects.clear();
    }
}

// Example: Pool for temporary damage calculation objects
const damageCalculationPool = new ObjectPool(
    () => ({ base: 0, modifiers: [], total: 0, type: '' }),
    (obj) => {
        obj.base = 0;
        obj.modifiers.length = 0;
        obj.total = 0;
        obj.type = '';
    }
);
```

ERROR HANDLING & LOGGING
-------------------------

**Comprehensive Error System:**
```javascript
class ErrorHandler {
    constructor() {
        this.errorLog = [];
        this.maxLogSize = 100;
        this.setupGlobalHandlers();
    }
    
    setupGlobalHandlers() {
        // Catch unhandled errors
        window.addEventListener('error', (event) => {
            this.logError('JavaScript Error', {
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
        
        // Catch unhandled promise rejections
        window.addEventListener('unhandledrejection', (event) => {
            this.logError('Unhandled Promise Rejection', {
                reason: event.reason,
                promise: event.promise
            });
        });
    }
    
    logError(category, details) {
        const errorEntry = {
            category,
            details,
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href
        };
        
        this.errorLog.push(errorEntry);
        
        // Limit log size
        if (this.errorLog.length > this.maxLogSize) {
            this.errorLog.shift();
        }
        
        // Console output for development
        console.error(`[${category}]`, details);
        
        // Optional: Send to remote logging service
        this.sendToLoggingService(errorEntry);
    }
    
    sendToLoggingService(errorEntry) {
        // Only in production, send errors to monitoring service
        if (window.location.hostname !== 'localhost') {
            // Implementation would depend on logging service
        }
    }
    
    getErrorLog() {
        return [...this.errorLog];
    }
    
    clearErrorLog() {
        this.errorLog.length = 0;
    }
}

const errorHandler = new ErrorHandler();
```

BROWSER COMPATIBILITY & POLYFILLS
----------------------------------

**Feature Detection and Graceful Degradation:**
```javascript
class BrowserSupport {
    static checkRequiredFeatures() {
        const features = {
            localStorage: typeof Storage !== 'undefined',
            promises: typeof Promise !== 'undefined',
            fetch: typeof fetch !== 'undefined',
            es6Classes: this.checkES6Classes(),
            cssGrid: this.checkCSSGrid()
        };
        
        const unsupported = Object.entries(features)
            .filter(([feature, supported]) => !supported)
            .map(([feature]) => feature);
        
        if (unsupported.length > 0) {
            this.showCompatibilityWarning(unsupported);
        }
        
        return unsupported.length === 0;
    }
    
    static checkES6Classes() {
        try {
            eval('class TestClass {}');
            return true;
        } catch (e) {
            return false;
        }
    }
    
    static checkCSSGrid() {
        return CSS.supports('display', 'grid');
    }
    
    static showCompatibilityWarning(unsupportedFeatures) {
        const warningHTML = `
            <div class="browser-warning">
                <h3>Browser Compatibility Warning</h3>
                <p>Your browser doesn't support some features needed for the best experience:</p>
                <ul>
                    ${unsupportedFeatures.map(feature => `<li>${feature}</li>`).join('')}
                </ul>
                <p>Please consider updating your browser for full functionality.</p>
                <button onclick="this.parentElement.style.display='none'">Continue Anyway</button>
            </div>
        `;
        
        document.body.insertAdjacentHTML('afterbegin', warningHTML);
    }
}

// Initialize browser compatibility check
document.addEventListener('DOMContentLoaded', () => {
    BrowserSupport.checkRequiredFeatures();
});
```

TESTING INFRASTRUCTURE
-----------------------

**Unit Testing Framework:**
```javascript
class SimpleTestFramework {
    constructor() {
        this.tests = [];
        this.results = [];
    }
    
    describe(suiteName, suiteFunction) {
        console.group(`Test Suite: ${suiteName}`);
        suiteFunction();
        console.groupEnd();
    }
    
    it(testName, testFunction) {
        try {
            testFunction();
            this.results.push({ name: testName, status: 'passed' });
            console.log(`✅ ${testName}`);
        } catch (error) {
            this.results.push({ name: testName, status: 'failed', error });
            console.error(`❌ ${testName}:`, error.message);
        }
    }
    
    expect(actual) {
        return {
            toBe: (expected) => {
                if (actual !== expected) {
                    throw new Error(`Expected ${expected}, but got ${actual}`);
                }
            },
            toEqual: (expected) => {
                if (JSON.stringify(actual) !== JSON.stringify(expected)) {
                    throw new Error(`Expected ${JSON.stringify(expected)}, but got ${JSON.stringify(actual)}`);
                }
            },
            toThrow: () => {
                if (typeof actual !== 'function') {
                    throw new Error('Expected a function');
                }
                let thrown = false;
                try {
                    actual();
                } catch (e) {
                    thrown = true;
                }
                if (!thrown) {
                    throw new Error('Expected function to throw an error');
                }
            }
        };
    }
    
    runAll() {
        console.log('Running all tests...');
        console.table(this.results);
        
        const passed = this.results.filter(r => r.status === 'passed').length;
        const failed = this.results.filter(r => r.status === 'failed').length;
        
        console.log(`Results: ${passed} passed, ${failed} failed`);
        return failed === 0;
    }
}

// Example tests
if (typeof enableDevMode !== 'undefined' && localStorage.getItem('rpg_dev_mode') === 'true') {
    const test = new SimpleTestFramework();
    
    test.describe('Character System', () => {
        test.it('should create character with valid data', () => {
            const character = characterManager.createCharacter('Test', 'human');
            test.expect(character.name).toBe('Test');
            test.expect(character.race).toBe('human');
            test.expect(character.lumens).toBe(150);
        });
        
        test.it('should calculate skill costs correctly', () => {
            const costs = skillSystem.getSkillCosts();
            test.expect(costs).toEqual([5, 10, 15, 20, 25]);
        });
    });
}
```

================================================================================
                        16. FILE STRUCTURE & ORGANIZATION
================================================================================

PROJECT STRUCTURE OVERVIEW
---------------------------

The RPG Skill Tree system follows a modular file organization that separates 
concerns and enables easy maintenance and expansion:

```
RPG-Skill-Tree/
├── index-new.html                 # Main application entry point
├── styles.css                     # Core UI styling and themes
├── app.js                         # Application initialization and routing
├── 
├── Core Systems/
│   ├── character-manager.js       # Character creation, Gil currency, saving
│   ├── game-logic.js              # Core game mechanics and calculations
│   ├── ui-components.js           # Massive shop system, UI rendering
│   └── inventory-system-clean.js  # Equipment and item management
├── 
├── Data Layer/
│   ├── races-data.js              # Race definitions and bonuses
│   ├── skills-data.js             # Skill trees and requirements
│   ├── items-data.js              # 364+ items with Gil pricing
│   ├── enchantments-data.js       # Magic enhancement system
│   ├── profession-items-data.js   # Profession-specific equipment
│   ├── monster-loot-data.js       # Monster drops and loot tables
│   ├── discoverable-items-data.js # Hidden/rare item definitions
│   └── status-effects.js          # Buffs, debuffs, and conditions
├── 
├── Combat & Monsters/
│   ├── monster-system.js          # Monster creation and AI
│   ├── monster-presets.js         # Pre-configured monster templates
│   └── damage_analysis.js         # Combat calculation utilities
├── 
├── UI Components/
│   ├── dice-roller-widget.js      # Dice rolling functionality
│   ├── dice-roller-demo.html      # Standalone dice roller demo
│   ├── dice-roller-advanced-demo.html # Advanced dice features
│   ├── styles-dice-roller.css     # Dice roller specific styling
│   ├── character-list.css         # Character selection styling
│   ├── skill-connections.css      # Skill tree visualization
│   └── shop-section-box.css       # Shop interface styling
├── 
├── Server Components/
│   ├── server.js                  # Node.js development server
│   ├── server.py                  # Python alternative server
│   ├── start_server.py            # Server startup script
│   └── package.json               # Node.js dependencies
├── 
├── Utility Scripts/
│   ├── icon-mapping.js            # Icon assignment automation
│   ├── verify-icons.js            # Icon validation utilities
│   ├── skill_mapping_fix.js       # Skill data migration
│   ├── add-weapon-damage.js       # Weapon stat generation
│   ├── add-enchantment-slots.js   # Enchantment system setup
│   ├── skill-bonuses.js           # Skill effect calculations
│   ├── stamina_analysis.js        # Stamina system analysis
│   └── todo-implementation-test.js # Development testing
├── 
├── Currency System Scripts/
│   ├── add_enchantment_slots.ps1  # PowerShell automation
│   └── fix_skills.ps1             # Skill system fixes
├── 
├── Assets/
│   └── icons_renamed_improved/    # 400+ game icons
│       ├── armor_*.png            # 136+ armor and clothing icons
│       ├── weapon_*.png           # 150+ weapon icons
│       ├── accessory_*.png        # 50+ jewelry and accessories
│       ├── consumable_*.png       # 30+ potions and consumables
│       ├── misc_*.png             # Miscellaneous items
│       └── abstract_pattern.png   # Default/fallback icons
├── 
├── Documentation/
│   ├── README.md                  # Project overview and setup
│   ├── TODO.md                    # Development roadmap
│   ├── Races.md                   # Race system documentation
│   ├── COMPREHENSIVE_SYSTEM_DOCUMENTATION.txt # This file
│   ├── GAME_MASTER_GUIDE.txt      # GM tools and guidance
│   ├── PLAYER_GUIDE.txt           # Player instructions
│   ├── MORE ITEMS.md              # Item expansion ideas
│   ├── SHOP_EXPANSION_IDEAS.md    # Shop enhancement plans
│   ├── Rebalancing.md             # Balance change logs
│   ├── enemy_hp_scaling.md        # Monster balance design
│   ├── hp_milestone_anti_exploit.md # HP progression safeguards
│   ├── hp_system_restructure.md   # Health system design
│   ├── stamina_system_analysis.md # Stamina mechanics
│   └── fusion-skills-current-list.md # Advanced skill combinations
│   ├── fusion-skills-current-list.md # Skill fusion mechanics
│   ├── enemy_hp_scaling.md        # Monster difficulty scaling
│   ├── hp_milestone_anti_exploit.md # Balance protection
│   ├── hp_system_restructure.md   # HP system redesign notes
│   ├── stamina_system_analysis.md # Stamina mechanics analysis
│   └── COMPREHENSIVE_SYSTEM_DOCUMENTATION.txt # This file
├── 
└── Development Tools/
    ├── test-races.html            # Race system testing
    ├── cleanup.txt                # Code cleanup notes
    ├── fixes.txt                  # Bug fix tracking
    ├── damage_report.txt          # Combat balance reports
    ├── jsconfig.json              # JavaScript project config
    ├── fix_skills.ps1             # PowerShell maintenance scripts
    └── add_enchantment_slots.ps1  # PowerShell automation
```

CORE FILE RELATIONSHIPS
------------------------

**Application Entry Point (index-new.html):**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RPG Skill Tree System</title>
    
    <!-- Core Styling -->
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="character-list.css">
    <link rel="stylesheet" href="styles-dice-roller.css">
</head>
<body>
    <!-- Application container -->
    <div id="app"></div>
    
    <!-- Load order is critical for dependencies -->
    
    <!-- 1. Data Layer - Must load first -->
    <script src="races-data.js"></script>
    <script src="skills-data.js"></script>
    <script src="items-data.js"></script>
    <script src="enchantments-data.js"></script>
    <script src="profession-items-data.js"></script>
    <script src="discoverable-items-data.js"></script>
    <script src="status-effects.js"></script>
    
    <!-- 2. Core Systems - Load after data -->
    <script src="ui-components-fixed.js"></script>
    <script src="character-manager.js"></script>
    <script src="inventory-system-clean.js"></script>
    <script src="game-logic.js"></script>
    
    <!-- 3. Extended Systems - Load after core -->
    <script src="monster-system-new.js"></script>
    <script src="dice-roller-widget.js"></script>
    <script src="icon-mapping.js"></script>
    
    <!-- 4. Application Bootstrap - Load last -->
    <script src="app.js"></script>
</body>
</html>
```

**Dependency Graph:**
```
Data Layer (races, skills, items, etc.)
    ↓
UI Components (modals, utilities)
    ↓
Character Manager (depends on races, skills)
    ↓
Inventory System (depends on items, enchantments)
    ↓
Game Logic (depends on all core systems)
    ↓
Extended Systems (monsters, dice roller)
    ↓
Application Bootstrap (app.js)
```

DATA FILE ORGANIZATION
-----------------------

**Race Data Structure (races-data.js):**
```javascript
const racesData = {
    human: {
        name: "Human",
        statModifiers: {
            hp: 1,          // +1 HP bonus  
            stamina: 1,     // +1 Stamina bonus
            accuracy: 1     // +1 Accuracy bonus
        },
        passiveTraits: [
            "Versatile Learning: Gain one free Tier 1 weapon skill upon character creation",
            "Ambitious Spirit: Earn 10% more Lumens from all sources",
            "Cross-Cultural Learning: Can learn Tier 1 skills from other races' skill trees"
        ],
        exclusiveSkills: ["human_determination"],
        description: "Jack of all trades, master of none...",
        icon: "👤"
    },
    // Additional races...
};
```

**Skill Data Structure (skills-data.js):**
```javascript
const skillsData = {
    determination: {
        name: "Human Determination",
        maxLevel: 1,
        requirements: { race: "human" },
        costs: [5],  // Only one level available
        effects: {
            description: "Enables learning Tier 1 skills from other races"
        },
        icon: "determination_icon.png"
    },
    // Skills organized by category and tier...
};
```

**Item Data Structure (items-data.js):**
```javascript
const itemsData = {
    weapons: {
        bronze_sword: {
            id: "bronze_sword",
            name: "Bronze Sword",
            type: "weapon",
            damage: { min: 3, max: 7 },
            durability: { current: 100, max: 100 },
            price: 15,
            enchantmentSlots: 1,
            requirements: {},
            icon: "weapon_sword_bronze.png"
        }
    },
    armor: {
        // Armor definitions...
    },
    consumables: {
        // Consumable definitions...
    }
};
```

SYSTEM MODULE ORGANIZATION
--------------------------

**Character Manager (character-manager.js):**
- **Primary Functions**: Character CRUD operations, validation, persistence
- **Dependencies**: races-data.js, skills-data.js, localStorage
- **Exports**: characterManager global object
- **Key APIs**: createCharacter(), saveCharacter(), loadCharacter()

**Game Logic (game-logic.js):**
- **Primary Functions**: Core calculations, skill unlocking, progression
- **Dependencies**: All data files, character-manager.js
- **Exports**: Game calculation functions
- **Key APIs**: calculateHP(), calculateStamina(), checkSkillRequirements()

**Inventory System (inventory-system-clean.js):**
- **Primary Functions**: Equipment management, enchantments, item operations
- **Dependencies**: items-data.js, enchantments-data.js
- **Exports**: inventorySystem global object
- **Key APIs**: equipItem(), addItem(), removeItem(), enchantItem()

**UI Components (ui-components-fixed.js):**
- **Primary Functions**: Reusable UI elements, modal system, utilities
- **Dependencies**: None (pure UI layer)
- **Exports**: UI utility functions and modal system
- **Key APIs**: showModal(), createTabNavigation(), renderItemList()

ASSET MANAGEMENT
----------------

**Icon Organization:**
The icons_renamed_improved/ directory uses a systematic naming convention:

```
Icon Naming Pattern: [category]_[item_name]_[variant].png

Examples:
- armor_leather_chest.png
- weapon_sword_steel.png
- accessory_ring_gold.png
- consumable_potion_health.png
- misc_key_silver.png
```

**Icon Mapping System (icon-mapping.js):**
```javascript
const iconMappings = {
    // Automatic mapping based on item properties
    generateIconPath: (item) => {
        const category = item.type;
        const baseName = item.id.replace(/_/g, '_');
        return `./icons_renamed_improved/${category}_${baseName}.png`;
    },
    
    // Fallback mappings for items without direct icon matches
    fallbackMappings: {
        weapon: 'weapon_generic.png',
        armor: 'armor_generic.png',
        accessory: 'accessory_generic.png',
        consumable: 'consumable_generic.png',
        misc: 'misc_generic.png'
    },
    
    // Validate icon existence
    validateIcon: async (iconPath) => {
        try {
            const img = new Image();
            return new Promise((resolve) => {
                img.onload = () => resolve(true);
                img.onerror = () => resolve(false);
                img.src = iconPath;
            });
        } catch {
            return false;
        }
    }
};
```

CONFIGURATION MANAGEMENT
-------------------------

**Project Configuration (jsconfig.json):**
```json
{
    "compilerOptions": {
        "target": "ES2020",
        "module": "ES6",
        "checkJs": true,
        "allowSyntheticDefaultImports": true
    },
    "include": [
        "*.js",
        "**/*.js"
    ],
    "exclude": [
        "node_modules",
        "server.js",
        "server.py"
    ]
}
```

**Package Configuration (package.json):**
```json
{
    "name": "rpg-skill-tree-system",
    "version": "1.0.0",
    "description": "Browser-based RPG character management system",
    "main": "index-new.html",
    "scripts": {
        "start": "node server.js",
        "dev": "node server.js --dev",
        "test": "echo \"No tests specified\" && exit 0"
    },
    "dependencies": {
        "express": "^4.18.0",
        "http-server": "^14.1.0"
    },
    "devDependencies": {
        "nodemon": "^2.0.20"
    }
}
```

DEVELOPMENT WORKFLOW
--------------------

**File Modification Guidelines:**

1. **Data Changes**: Modify data files (races-data.js, skills-data.js, etc.)
   - Always validate JSON structure
   - Test changes with existing characters
   - Update documentation if adding new properties

2. **System Changes**: Modify core system files (character-manager.js, etc.)
   - Follow existing API patterns
   - Maintain backward compatibility
   - Add error handling for edge cases

3. **UI Changes**: Modify UI components or styling
   - Test across different screen sizes
   - Ensure accessibility compliance
   - Maintain consistent visual design

4. **Asset Changes**: Add or modify icons
   - Follow naming conventions
   - Update icon-mapping.js if needed
   - Optimize file sizes for web delivery

**Build Process:**
Currently, the system requires no build step - all files are served directly.
Future enhancements might include:
- JavaScript bundling for production
- CSS preprocessing (SASS/LESS)
- Image optimization pipeline
- Automated testing integration

SCALABILITY CONSIDERATIONS
--------------------------

**Module Loading Strategy:**
```javascript
// Future: Dynamic module loading for larger systems
const ModuleLoader = {
    loadedModules: new Set(),
    
    async loadModule(moduleName) {
        if (this.loadedModules.has(moduleName)) {
            return;
        }
        
        const moduleConfig = {
            'advanced-combat': ['combat-engine.js', 'spell-system.js'],
            'guild-system': ['guild-manager.js', 'guild-data.js'],
            'crafting-system': ['crafting-engine.js', 'recipe-data.js']
        };
        
        if (moduleConfig[moduleName]) {
            for (const file of moduleConfig[moduleName]) {
                await this.loadScript(`./modules/${file}`);
            }
            this.loadedModules.add(moduleName);
        }
    },
    
    loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
};
```

**File Size Optimization:**
- **Current Total Size**: ~2.5MB (including icons)
- **JavaScript Code**: ~200KB uncompressed
- **Icon Assets**: ~2.3MB total
- **Optimization Targets**: 
  - Lazy load icons as needed
  - Compress icon assets
  - Minify JavaScript for production

================================================================================
                        17. BALANCE MECHANICS & PROGRESSION SYSTEMS
================================================================================

BALANCE PHILOSOPHY
------------------

The RPG system maintains balance through several core principles:

- **Resource Scarcity**: Limited currency (Lumens) forces meaningful choices
- **Opportunity Cost**: Each skill investment prevents others temporarily
- **Racial Uniqueness**: Each race has distinct advantages and playstyles
- **Progression Gates**: Higher tier skills require significant investment
- **Equipment Scaling**: Items provide meaningful but not overwhelming bonuses

CHARACTER PROGRESSION CURVES
-----------------------------

**Skill Cost Progression:**
```javascript
const skillCostProgression = {
    // Cost per skill level: [1, 2, 3, 4, 5]
    baseCosts: [5, 10, 15, 20, 25],
    
    // Total investment to max a single skill
    maxSkillCost: 75, // Sum of all 5 levels
    
    // Starting Lumens vs. Skill Costs
    startingBudget: 150,
    maxSkillsAtStart: 3, // Can afford 3 level-1 skills or 2 level-2 skills
    
    // Long-term progression targets
    progressionMilestones: {
        early: { lumens: 300, skills: "5-8 total levels" },
        mid: { lumens: 600, skills: "10-15 total levels" },
        late: { lumens: 1200, skills: "20+ total levels" }
    }
};
```

**HP Scaling Analysis:**
```javascript
const hpScalingSystem = {
    baseCalculation: {
        // HP = character.stats.hp (1:1 ratio)
        // Starting HP: 10, increased by purchasing HP stat upgrades
        hpFormula: "maxHp = stats.hp",
        
        // Example calculations for different builds  
        exampleBuilds: {
            tankDwarf: {
                baseHp: 10,      // Starting HP stat
                racialBonus: 1,  // Dwarf HP bonus
                purchased: 30,   // Purchased HP upgrades
                total: 41        // 10 + 1 + 30 = 41 HP
            },
            
            balancedHuman: {
                baseHp: 10,      // Starting HP stat
                racialBonus: 1,  // Human HP bonus  
                purchased: 15,   // Moderate HP investment
                total: 26        // 10 + 1 + 15 = 26 HP
            },
            
            fragileMage: {
                baseHp: 10,      // Starting HP stat
                racialBonus: 0,  // No racial HP bonus
                purchased: 5,    // Minimal HP investment
                total: 15        // 10 + 0 + 5 = 15 HP
            }
        }
    },
    
    // HP milestone protection system
    milestoneSystem: {
        description: "Prevents easy HP farming through skill resets",
        implementation: {
            trackMaximum: "Track highest HP ever achieved",
            preventRegression: "New builds can't fall below 80% of max",
            encourageGrowth: "Reward builds that exceed previous maximum"
        }
    }
};
```

ECONOMIC BALANCE
----------------

**Lumen Economy Design:**
```javascript
const economicBalance = {
    lumensources: {
        starting: 150,
        questRewards: "10-50 per quest",
        combat: "5-15 per encounter",
        exploration: "5-25 per discovery",
        trading: "Variable based on item value"
    },
    
    lumensinks: {
        skills: {
            tier1: 75,  // Max cost for one Tier 1 skill (5+10+15+20+25)
            tier2: 75,  // Same cost structure
            tier3: 75,  // Consistent across tiers
            fusion: 150 // Cost to unlock fusion skill
        },
        equipment: {
            basic: "5-25 Lumens",
            advanced: "50-150 Lumens", 
            legendary: "200-500 Lumens"
        },
        services: {
            enchanting: "10-100 Lumens per enchantment",
            repair: "5% of item value",
            training: "25-75 Lumens per session"
        }
    },
    
    // Balance validation
    balanceCheck: {
        skillVsEquipment: "Skills should cost similar to good equipment",
        shortTermChoices: "Players face meaningful 2-3 purchase decisions",
        longTermProgression: "Weeks of play to max multiple skill trees"
    }
};
```

**Item Power Scaling:**
```javascript
const itemPowerCurve = {
    weaponDamage: {
        tier1: { min: 1, max: 5, average: 3 },    // Starter weapons
        tier2: { min: 3, max: 7, average: 5 },    // Bronze/Iron tier
        tier3: { min: 5, max: 10, average: 7.5 }, // Steel/Silver tier
        tier4: { min: 8, max: 15, average: 11.5 }, // Masterwork tier
        legendary: { min: 12, max: 25, average: 18.5 } // Epic artifacts
    },
    
    armorProtection: {
        // Damage reduction percentages
        light: "5-15% damage reduction",
        medium: "10-25% damage reduction", 
        heavy: "20-40% damage reduction",
        magical: "30-50% + special effects"
    },
    
    // Enchantment power budget
    enchantmentBudget: {
        tier1Items: "1-2 enchantment slots, weak effects",
        tier2Items: "2-3 enchantment slots, moderate effects",
        tier3Items: "3-4 enchantment slots, strong effects",
        legendaryItems: "4-5 slots, unique/powerful effects"
    }
};
```

RACIAL BALANCE MATRIX
---------------------

**Comparative Analysis:**
```javascript
const racialBalanceMatrix = {
    // Starting advantages
    startingBonuses: {
        human: { hp: 1, stamina: 1, accuracy: 1, special: "cross-cultural learning + 10% lumens" },
        dwarf: { physicalDefence: 2, hp: 1, special: "constitution bonus + crafting" },
        elf: { magicPower: 1, accuracy: 1, special: "nature affinity + longevity" },
        dragonborn: { physicalDefence: 1, magicalDefence: 1, strength: 1, special: "elemental resistance" },
        halfling: { speed: 1, special: "luck bonuses + nimbleness" },
        tiefling: { magicPower: 1, magicalDefence: 1, stamina: 1, special: "infernal heritage" },
        drow: { speed: 1, magicPower: 1, magicalDefence: 1, special: "darkvision + poison immunity" },
        gnoll: { strength: 1, speed: 1, hp: 1, special: "pack tactics + savagery" }
    },
    
    // Power level assessment
    powerLevels: {
        // Total "value" accounting for unique abilities
        human: 8.5,     // Very strong due to flexibility
        dwarf: 8.0,     // Strong tank potential
        dragonborn: 7.5, // Balanced with elemental themes
        orc: 7.5,       // Strong combat focus
        elf: 7.0,       // Specialized but fragile
        tiefling: 7.0,  // Magical specialist
        halfling: 6.5,  // Economic advantages
        gnome: 6.5      // Crafting/technical specialist
    },
    
    // Balancing mechanisms
    balancingFactors: {
        skillAccess: "All races can eventually access most skills",
        equipment: "Equipment availability equalizes combat power",
        playstyles: "Different races excel in different activities",
        groupPlay: "Racial diversity encouraged in parties"
    }
};
```

COMBAT BALANCE SYSTEMS
----------------------

**Damage Calculation Framework:**
```javascript
const combatBalance = {
    damageFormula: {
        // Base: weapon damage + skill bonuses + temporary effects
        weaponComponent: "Primary damage source (60-70%)",
        skillComponent: "Skill bonuses (20-30%)",
        temporaryComponent: "Buffs, enchantments, situational (10-20%)",
        
        // Example calculation
        exampleAttack: {
            weapon: 8,        // Steel sword (5-10 range, rolled 8)
            skillBonus: 3,    // Combat skills provide +3
            enchantment: 2,   // Fire enchantment adds +2
            totalDamage: 13   // Final damage output
        }
    },
    
    defenseCalculation: {
        // Defense reduces damage percentage, not flat reduction
        armorReduction: "Percentage-based damage reduction",
        skillReduction: "Additional % from defensive skills",
        
        exampleDefense: {
            incomingDamage: 13,
            armorReduction: 0.25,    // 25% from plate armor
            skillReduction: 0.10,    // 10% from defensive skills
            totalReduction: 0.325,   // 32.5% total reduction
            finalDamage: 9           // 13 * (1 - 0.325) = 8.775 → 9
        }
    },
    
    balancingMechanics: {
        criticalHits: "5% chance for 2x damage",
        dodging: "Stamina-based damage avoidance",
        statusEffects: "Temporary combat modifiers",
        terrainFactors: "Environmental combat bonuses/penalties"
    }
};
```

PROGRESSION GATING SYSTEMS
---------------------------

**Skill Unlock Requirements:**
```javascript
const skillGating = {
    tierProgression: {
        tier1: {
            requirements: "Racial access or cross-cultural learning",
            examples: "Basic combat, crafting, social skills",
            investment: "5-75 Lumens per skill tree"
        },
        
        tier2: {
            requirements: "Tier 1 skills at level 3+",
            examples: "Advanced techniques, specializations",
            investment: "5-75 Lumens per skill tree"
        },
        
        tier3: {
            requirements: "Tier 2 skills at level 5 (max level)",
            examples: "Master-level abilities, unique techniques",
            investment: "5-75 Lumens per skill tree"
        },
        
        fusionSkills: {
            requirements: "Multiple maxed skills from different trees",
            examples: "Combining magic + combat, crafting + social",
            investment: "150+ Lumens for unlock, then standard progression"
        }
    },
    
    // Example progression paths
    exampleProgression: {
        combatSpecialist: {
            early: "Weapon Mastery (Tier 1) → Level 3",
            mid: "Advanced Combat (Tier 2) → Level 5", 
            late: "Weapon Master (Tier 3) → Max Level",
            fusion: "Spell Blade (Combat + Magic Fusion)"
        }
    }
};
```

ANTI-EXPLOITATION MEASURES
---------------------------

**Exploit Prevention Systems:**
```javascript
const exploitPrevention = {
    skillReset: {
        limitation: "Cannot reset skills below HP milestone threshold",
        purpose: "Prevents cycling high-HP builds for permanent advantages",
        implementation: "Track maximum HP ever achieved per character"
    },
    
    currencyExploits: {
        saveScumming: "Autosave prevents reload-based cheating",
        duplication: "Item IDs and checksums prevent duplication",
        overflow: "Input validation prevents currency overflow"
    },
    
    progressionExploits: {
        requirementBypass: "Server-side validation for skill unlocks",
        levelSkipping: "Prerequisites strictly enforced",
        racialLimits: "Racial restrictions cannot be circumvented"
    },
    
    balanceProtections: {
        statCapping: "Maximum values prevent infinite scaling",
        cooldowns: "Prevent rapid repeated actions",
        validation: "All character changes validated against rules"
    }
};
```

ENDGAME BALANCE CONSIDERATIONS
------------------------------

**Late-Game Power Scaling:**
```javascript
const endgameBalance = {
    powerCeiling: {
        maxSkillLevels: "Characters can eventually max multiple trees",
        equipmentCaps: "Legendary items provide upper power bounds",
        enchantmentLimits: "Maximum enchantment slots prevent infinite scaling",
        statusEffectCaps: "Buffs have maximum duration and potency"
    },
    
    contentScaling: {
        monsterProgression: "Enemy difficulty scales with player power",
        questComplexity: "Later quests require diverse skill combinations",
        resourceDemand: "High-level content requires significant investment",
        groupContent: "Some challenges designed for multiple characters"
    },
    
    replayability: {
        racialVariety: "Different races encourage multiple playthroughs",
        buildDiversity: "Multiple viable character builds per race",
        skillSynergies: "Different skill combinations create unique playstyles",
        contentBranching: "Choices affect available content and rewards"
    }
};
```

BALANCE TESTING FRAMEWORK
--------------------------

**Automated Balance Validation:**
```javascript
const balanceTests = {
    // Run automated tests to catch balance issues
    validateEconomy: () => {
        const startingBudget = 150;
        const tier1SkillCost = 5 + 10 + 15 + 20 + 25; // 75 total
        
        console.assert(
            startingBudget < tier1SkillCost * 2,
            "Starting budget should not allow maxing 2 skills"
        );
        
        console.assert(
            startingBudget >= tier1SkillCost,
            "Starting budget should allow maxing 1 skill"
        );
    },
    
    validateRacialBalance: () => {
        Object.values(racesData).forEach(race => {
            const totalValue = 
                (race.bonuses.lumens || 0) +
                (race.bonuses.hp || 0) * 2 +     // HP worth 2x Lumens
                (race.bonuses.stamina || 0) * 1; // Stamina worth 1x Lumens
            
            console.assert(
                totalValue >= 40 && totalValue <= 80,
                `Race ${race.name} value ${totalValue} outside acceptable range`
            );
        });
    },
    
    validateItemProgression: () => {
        // Ensure item power scales appropriately with cost
        // Test that progression feels meaningful but not overwhelming
        // Validate that no single item dominates all others
    }
};
```

================================================================================
                        18. EXTENSIBILITY & FUTURE DEVELOPMENT
================================================================================

SYSTEM EXTENSIBILITY FRAMEWORK
-------------------------------

The RPG system is designed with extensibility as a core principle, enabling
easy addition of new features, content, and mechanics without breaking
existing functionality.

**Plugin Architecture Foundation:**
```javascript
class PluginManager {
    constructor() {
        this.plugins = new Map();
        this.hooks = new Map();
        this.loadedPlugins = new Set();
    }
    
    registerPlugin(name, plugin) {
        if (this.plugins.has(name)) {
            console.warn(`Plugin ${name} already registered, overwriting`);
        }
        
        this.plugins.set(name, plugin);
        console.log(`Plugin ${name} registered successfully`);
    }
    
    loadPlugin(name) {
        const plugin = this.plugins.get(name);
        if (!plugin) {
            throw new Error(`Plugin ${name} not found`);
        }
        
        try {
            // Initialize plugin with system access
            plugin.initialize({
                gameEvents: gameEvents,
                characterManager: characterManager,
                skillSystem: skillSystem,
                inventorySystem: inventorySystem
            });
            
            // Register plugin hooks
            if (plugin.hooks) {
                Object.entries(plugin.hooks).forEach(([hookName, handler]) => {
                    this.addHook(hookName, handler);
                });
            }
            
            this.loadedPlugins.add(name);
            console.log(`Plugin ${name} loaded successfully`);
            
        } catch (error) {
            console.error(`Failed to load plugin ${name}:`, error);
        }
    }
    
    addHook(hookName, handler) {
        if (!this.hooks.has(hookName)) {
            this.hooks.set(hookName, []);
        }
        this.hooks.get(hookName).push(handler);
    }
    
    executeHook(hookName, data) {
        if (this.hooks.has(hookName)) {
            this.hooks.get(hookName).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`Error in hook ${hookName}:`, error);
                }
            });
        }
    }
}

const pluginManager = new PluginManager();
```

**Example Plugin Implementation:**
```javascript
// Example: Guild System Plugin
const guildSystemPlugin = {
    name: 'GuildSystem',
    version: '1.0.0',
    
    initialize(systemAccess) {
        this.systems = systemAccess;
        this.setupGuildData();
        this.setupUI();
        this.registerEventHandlers();
    },
    
    setupGuildData() {
        // Add guild properties to character data
        this.systems.characterManager.extendCharacterSchema({
            guild: {
                id: null,
                rank: null,
                joinDate: null,
                contributions: 0
            }
        });
    },
    
    setupUI() {
        // Add guild tab to main navigation
        const guildTab = {
            id: 'guild-tab',
            label: 'Guild',
            content: this.renderGuildInterface(),
            onActivate: () => this.refreshGuildData()
        };
        
        if (window.addNavigationTab) {
            window.addNavigationTab(guildTab);
        }
    },
    
    hooks: {
        'character.created': (character) => {
            // Initialize guild data for new characters
            character.guild = {
                id: null,
                rank: null,
                joinDate: null,
                contributions: 0
            };
        },
        
        'character.levelUp': (data) => {
            // Award guild contribution points on level up
            if (data.character.guild.id) {
                data.character.guild.contributions += 10;
            }
        }
    },
    
    renderGuildInterface() {
        return `
            <div class="guild-interface">
                <h2>Guild Management</h2>
                <div id="guild-status">
                    <!-- Guild status will be populated here -->
                </div>
                <div class="guild-actions">
                    <button onclick="guildSystemPlugin.searchGuilds()">Find Guild</button>
                    <button onclick="guildSystemPlugin.createGuild()">Create Guild</button>
                </div>
            </div>
        `;
    }
};

// Register the plugin
pluginManager.registerPlugin('GuildSystem', guildSystemPlugin);
```

CONTENT EXPANSION FRAMEWORKS
-----------------------------

**New Race Addition System:**
```javascript
class RaceExpansionKit {
    static addNewRace(raceId, raceData) {
        // Validate race data structure
        const validation = this.validateRaceData(raceData);
        if (!validation.isValid) {
            throw new Error(`Invalid race data: ${validation.errors.join(', ')}`);
        }
        
        // Add to races data
        racesData[raceId] = raceData;
        
        // Update UI elements
        this.updateRaceSelectionUI();
        
        // Register race-specific skills if any
        if (raceData.uniqueSkills) {
            Object.entries(raceData.uniqueSkills).forEach(([skillId, skillData]) => {
                skillsData[skillId] = skillData;
            });
        }
        
        // Trigger race addition event
        gameEvents.emit('race.added', { raceId, raceData });
        
        console.log(`New race ${raceData.name} added successfully`);
    }
    
    static validateRaceData(raceData) {
        const errors = [];
        
        if (!raceData.name) errors.push('Race name is required');
        if (!raceData.bonuses) errors.push('Race bonuses are required');
        if (!raceData.description) errors.push('Race description is required');
        
        // Validate bonus structure
        if (raceData.bonuses) {
            const validBonuses = ['lumens', 'hp', 'stamina'];
            Object.keys(raceData.bonuses).forEach(bonus => {
                if (!validBonuses.includes(bonus)) {
                    errors.push(`Invalid bonus type: ${bonus}`);
                }
            });
        }
        
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    
    static updateRaceSelectionUI() {
        // Refresh race selection dropdowns and UI elements
        const raceSelects = document.querySelectorAll('.race-selection');
        raceSelects.forEach(select => {
            // Rebuild options
            select.innerHTML = Object.entries(racesData)
                .map(([id, race]) => `<option value="${id}">${race.name}</option>`)
                .join('');
        });
    }
}

// Example: Adding a new Draconic race
const draconicRace = {
    name: "Draconic",
    bonuses: {
        lumens: 25,
        hp: 15,
        stamina: 10
    },
    skills: {
        dragonBreath: true,
        scaleArmor: true
    },
    description: "Ancient dragon-blooded beings with innate magical abilities and natural armor.",
    icon: "draconic_icon.png",
    uniqueSkills: {
        dragonBreath: {
            name: "Dragon Breath",
            maxLevel: 3,
            requirements: { race: "draconic" },
            costs: [10, 15, 20],
            effects: {
                level1: "Breathe fire for 5-8 damage",
                level2: "Breathe fire for 8-12 damage", 
                level3: "Breathe fire for 12-18 damage"
            }
        }
    }
};

// Add the new race (this would be called from a content pack)
// RaceExpansionKit.addNewRace('draconic', draconicRace);
```

**Skill System Extensions:**
```javascript
class SkillExpansionKit {
    static addSkillTree(treeId, treeData) {
        // Validate skill tree structure
        const validation = this.validateSkillTree(treeData);
        if (!validation.isValid) {
            throw new Error(`Invalid skill tree: ${validation.errors.join(', ')}`);
        }
        
        // Add skills to the skills data
        Object.entries(treeData.skills).forEach(([skillId, skillData]) => {
            skillsData[skillId] = skillData;
        });
        
        // Register tree metadata
        if (!window.skillTrees) {
            window.skillTrees = {};
        }
        window.skillTrees[treeId] = {
            name: treeData.name,
            description: treeData.description,
            skills: Object.keys(treeData.skills)
        };
        
        // Update UI
        this.updateSkillTreeUI();
        
        gameEvents.emit('skillTree.added', { treeId, treeData });
    }
    
    static addFusionSkill(skillId, skillData, requirements) {
        // Validate fusion requirements
        const validation = this.validateFusionRequirements(requirements);
        if (!validation.isValid) {
            throw new Error(`Invalid fusion requirements: ${validation.errors.join(', ')}`);
        }
        
        // Add fusion skill with special requirements
        skillsData[skillId] = {
            ...skillData,
            isFusion: true,
            fusionRequirements: requirements
        };
        
        gameEvents.emit('fusionSkill.added', { skillId, skillData, requirements });
    }
    
    static validateSkillTree(treeData) {
        const errors = [];
        
        if (!treeData.name) errors.push('Tree name required');
        if (!treeData.skills) errors.push('Skills object required');
        
        // Validate each skill in the tree
        Object.entries(treeData.skills || {}).forEach(([skillId, skill]) => {
            if (!skill.name) errors.push(`Skill ${skillId} missing name`);
            if (!skill.maxLevel) errors.push(`Skill ${skillId} missing maxLevel`);
            if (!skill.costs) errors.push(`Skill ${skillId} missing costs array`);
        });
        
        return {
            isValid: errors.length === 0,
            errors
        };
    }
}
```

API INTEGRATION CAPABILITIES
-----------------------------

**External Data Integration:**
```javascript
class ExternalAPIManager {
    constructor() {
        this.apiEndpoints = new Map();
        this.cache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
    }
    
    registerAPI(name, config) {
        this.apiEndpoints.set(name, {
            baseURL: config.baseURL,
            headers: config.headers || {},
            timeout: config.timeout || 5000
        });
    }
    
    async fetchData(apiName, endpoint, options = {}) {
        const cacheKey = `${apiName}:${endpoint}`;
        
        // Check cache first
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                return cached.data;
            }
        }
        
        const apiConfig = this.apiEndpoints.get(apiName);
        if (!apiConfig) {
            throw new Error(`API ${apiName} not registered`);
        }
        
        try {
            const response = await fetch(`${apiConfig.baseURL}${endpoint}`, {
                headers: { ...apiConfig.headers, ...options.headers },
                timeout: apiConfig.timeout,
                ...options
            });
            
            if (!response.ok) {
                throw new Error(`API request failed: ${response.status}`);
            }
            
            const data = await response.json();
            
            // Cache the result
            this.cache.set(cacheKey, {
                data,
                timestamp: Date.now()
            });
            
            return data;
            
        } catch (error) {
            console.error(`API request to ${apiName}/${endpoint} failed:`, error);
            throw error;
        }
    }
    
    // Example: Integration with external item database
    async loadExternalItems(category) {
        try {
            const items = await this.fetchData('itemDatabase', `/items/${category}`);
            
            // Convert external format to internal format
            const convertedItems = items.map(item => ({
                id: `external_${item.id}`,
                name: item.display_name,
                type: item.category,
                price: item.cost,
                // ... convert other properties
            }));
            
            // Add to game data
            convertedItems.forEach(item => {
                itemsData[item.type] = itemsData[item.type] || {};
                itemsData[item.type][item.id] = item;
            });
            
            return convertedItems;
            
        } catch (error) {
            console.warn('Failed to load external items:', error);
            return [];
        }
    }
}

const apiManager = new ExternalAPIManager();

// Register APIs
apiManager.registerAPI('itemDatabase', {
    baseURL: 'https://api.rpgitems.com/v1',
    headers: { 'Authorization': 'Bearer YOUR_API_KEY' }
});
```

MODDING SUPPORT FRAMEWORK
--------------------------

**Mod Loading System:**
```javascript
class ModLoader {
    constructor() {
        this.loadedMods = new Map();
        this.modDirectory = './mods/';
        this.enabledMods = this.getEnabledMods();
    }
    
    getEnabledMods() {
        try {
            const enabled = localStorage.getItem('rpg_enabled_mods');
            return enabled ? JSON.parse(enabled) : [];
        } catch {
            return [];
        }
    }
    
    setEnabledMods(modList) {
        localStorage.setItem('rpg_enabled_mods', JSON.stringify(modList));
        this.enabledMods = modList;
    }
    
    async loadMod(modId) {
        if (this.loadedMods.has(modId)) {
            return this.loadedMods.get(modId);
        }
        
        try {
            // Load mod manifest
            const manifestResponse = await fetch(`${this.modDirectory}${modId}/manifest.json`);
            const manifest = await manifestResponse.json();
            
            // Validate mod compatibility
            if (!this.validateModCompatibility(manifest)) {
                throw new Error('Mod incompatible with current version');
            }
            
            // Load mod files in order
            const mod = {
                id: modId,
                manifest,
                loaded: false
            };
            
            for (const file of manifest.files) {
                await this.loadModFile(modId, file);
            }
            
            // Execute mod initialization
            if (manifest.initFunction) {
                window[manifest.initFunction]();
            }
            
            mod.loaded = true;
            this.loadedMods.set(modId, mod);
            
            console.log(`Mod ${manifest.name} v${manifest.version} loaded successfully`);
            return mod;
            
        } catch (error) {
            console.error(`Failed to load mod ${modId}:`, error);
            throw error;
        }
    }
    
    async loadModFile(modId, filename) {
        const script = document.createElement('script');
        script.src = `${this.modDirectory}${modId}/${filename}`;
        
        return new Promise((resolve, reject) => {
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
    
    validateModCompatibility(manifest) {
        // Check version compatibility
        const gameVersion = window.RPG_VERSION || '1.0.0';
        const requiredVersion = manifest.requiresGameVersion;
        
        if (requiredVersion && !this.isVersionCompatible(gameVersion, requiredVersion)) {
            return false;
        }
        
        // Check for conflicting mods
        if (manifest.conflicts) {
            for (const conflictId of manifest.conflicts) {
                if (this.loadedMods.has(conflictId)) {
                    return false;
                }
            }
        }
        
        return true;
    }
    
    async loadAllEnabledMods() {
        for (const modId of this.enabledMods) {
            try {
                await this.loadMod(modId);
            } catch (error) {
                console.error(`Failed to load enabled mod ${modId}:`, error);
            }
        }
    }
}

const modLoader = new ModLoader();

// Example mod manifest.json structure:
/*
{
    "id": "enhanced-combat",
    "name": "Enhanced Combat System",
    "version": "1.2.0",
    "author": "ModAuthor",
    "description": "Adds advanced combat mechanics and new weapon types",
    "requiresGameVersion": "1.0.0",
    "files": [
        "combat-extensions.js",
        "new-weapons.js",
        "combat-ui.js"
    ],
    "initFunction": "initEnhancedCombat",
    "conflicts": ["simple-combat-mod"],
    "dependencies": ["base-weapon-expansion"]
}
*/
```

FUTURE DEVELOPMENT ROADMAP
---------------------------

**Planned Features and Extensibility Targets:**

**Phase 1: Core Enhancements (Next 3 months)**
- **Multiplayer Support**: Real-time character sharing and group campaigns
- **Advanced Combat**: Turn-based tactical combat system
- **Quest System**: Dynamic quest generation and tracking
- **Save System**: Cloud save integration and backup systems

**Phase 2: Content Expansion (3-6 months)**
- **Additional Races**: 4-6 new races with unique mechanics
- **Magic System**: Comprehensive spellcasting and magical items
- **Crafting System**: Complex item creation and modification
- **World Building**: Location system with travel and exploration

**Phase 3: Advanced Features (6-12 months)**
- **AI Integration**: Smart NPCs and dynamic story generation
- **Voice Integration**: Speech-to-text for note taking and commands
- **Mobile App**: Native mobile application with sync capabilities
- **Analytics Dashboard**: Campaign tracking and character progression analysis

**Extensibility Architecture Goals:**
```javascript
// Future: Complete plugin ecosystem
const futureArchitecture = {
    pluginMarketplace: "Centralized mod/plugin distribution",
    visualScripting: "Node-based quest and system design",
    liveReloading: "Hot-swap content without restarts",
    cloudIntegration: "Seamless data sync across devices",
    
    // Developer tools
    modSDK: "Complete modding toolkit and documentation",
    debugging: "Advanced debugging tools for mod developers",
    testing: "Automated testing framework for mods",
    
    // Performance targets
    scalability: "Support for 1000+ items, 100+ skills, 50+ races",
    performance: "< 100ms response time for all operations",
    memory: "< 50MB memory footprint for core systems"
};
```

**Migration Strategy for Breaking Changes:**
```javascript
class VersionMigrator {
    static migrations = {
        '1.0.0': {
            '1.1.0': (data) => {
                // Migrate data from 1.0.0 to 1.1.0
                if (data.character && !data.character.version) {
                    data.character.version = '1.1.0';
                }
                return data;
            }
        }
    };
    
    static migrateData(data, fromVersion, toVersion) {
        let currentData = data;
        let currentVersion = fromVersion;
        
        // Apply migrations step by step
        while (currentVersion !== toVersion) {
            const nextVersion = this.getNextVersion(currentVersion, toVersion);
            const migration = this.migrations[currentVersion]?.[nextVersion];
            
            if (migration) {
                currentData = migration(currentData);
                currentVersion = nextVersion;
            } else {
                throw new Error(`No migration path from ${currentVersion} to ${nextVersion}`);
            }
        }
        
        return currentData;
    }
}
```

================================================================================
                        19. VERSION 2.0 MAJOR UPDATES & FEATURES
================================================================================

CURRENCY SYSTEM OVERHAUL
-------------------------
**Major Change**: Replaced complex gold/silver/copper system with unified Gil currency

**Previous System:**
- Complex multi-currency objects: {gold: X, silver: Y, copper: Z}
- Confusing conversion ratios and calculations
- Inconsistent pricing across items
- Poor user experience with currency display

**New Gil System:**
- **Simple Numbers**: All prices are single Gil amounts
- **Final Fantasy Inspired**: Familiar currency system for RPG players
- **Clear Pricing**: Easy to understand item costs
- **Balanced Economy**: Starting Gil carefully tuned for progression

**Implementation Details:**
- **Starting Gil**: 65 (exactly enough for basic starter kit + 10 spare)
- **Automatic Migration**: Old currency automatically converted to Gil
- **Price Range**: 5 Gil (cheapest) to 4000 Gil (most expensive)
- **Selling System**: 50% of purchase price when selling items

MASSIVE SHOP EXPANSION
----------------------
**Scale**: Expanded from ~50 items to 364+ unique items

**New Categories:**
- **Weapons**: 111 items across 6 weapon types
  - Swords: 21 items (Rusty Sword → Divine Blade)
  - Bows: 18 items (Training Bow → Cosmic Bow)  
  - Staves: 21 items (Wooden Staff → Universe Staff)
  - Axes: 18 items (Rusty Axe → Titan Axe)
  - Daggers: 18 items (Rusty Dagger → Shadow Fang)
  - Hammers: 15 items (Wooden Hammer → World Breaker)

- **Armor**: 120+ items across 3 armor types
  - Light Armor: 45+ items
  - Medium Armor: 35+ items  
  - Heavy Armor: 40+ items

- **Accessories**: 63 items across 3 categories
  - Rings: 24 items
  - Amulets: 24 items
  - Special Accessories: 15+ items

- **Materials & Consumables**: 70+ items
  - Crafting Materials: 30+ items
  - Consumables: 25+ items
  - Special Items: 15+ items

**Progression Design:**
- **Tier-Based Scaling**: Items clearly organized by power level
- **Rarity System**: Common → Uncommon → Rare → Epic → Legendary
- **Thematic Consistency**: Items follow logical progression patterns
- **Icon Integration**: All items have appropriate visual representation

UI/UX IMPROVEMENTS
------------------
**Enhanced Shop Interface:**
- **Tabbed Organization**: Weapons, Armor, Accessories, Materials, Consumables
- **Smart Sorting**: Items organized by tier and price
- **Search & Filter**: Find items quickly
- **Clear Pricing**: Gil amounts prominently displayed
- **Purchase Feedback**: Clear success/error messages

**Navigation Updates:**
- **Gil Display**: Currency shown in navigation bar
- **Real-time Updates**: Gil amount updates immediately after transactions
- **Consistent Theming**: Shop matches overall application design
- **Responsive Layout**: Works on different screen sizes

**Quality of Life Features:**
- **Sell Functionality**: Sell items for 50% value
- **Quantity Management**: Handle stackable items properly
- **Tooltips**: Hover information for items
- **Error Prevention**: Cannot buy items without sufficient Gil

BALANCE & ECONOMY UPDATES
-------------------------
**Early Game Balance:**
- **Careful Tuning**: Starting Gil forces meaningful choices
- **Progression Gates**: Cannot afford everything immediately
- **Strategic Decisions**: Must choose between different upgrade paths
- **Consumable Budget**: Small amount left for potions/supplies

**Long-term Progression:**
- **Exponential Scaling**: Higher tier items cost dramatically more
- **Earning Incentives**: Must play to afford better equipment
- **Endgame Goals**: Legendary items provide long-term objectives
- **Economic Circulation**: Selling system allows Gil recovery

TECHNICAL IMPROVEMENTS
----------------------
**Code Organization:**
- **Modular Currency**: Gil functions separated in character-manager.js
- **Scalable Shop**: ui-components.js handles massive item catalog
- **Performance**: Efficient rendering of 364+ items
- **Error Handling**: Robust transaction validation

**Data Structure:**
- **Simplified Pricing**: Items use simple number prices
- **Legacy Support**: Old currency format still readable
- **Migration Logic**: Automatic upgrade for existing characters
- **Future-Proof**: Easy to add new items and categories

**Development Tools:**
- **Icon Mapping**: Automated icon assignment for new items
- **Price Validation**: Tools to check pricing consistency
- **Balance Analysis**: Scripts to evaluate economic balance
- **Content Generation**: Templates for adding new items

FUTURE ROADMAP
--------------
**Planned Features:**
- **Consumables Re-addition**: Health potions, mana potions, buff items
- **Crafting Integration**: Use Gil to buy materials for crafting
- **Quest Rewards**: Gil rewards for completed objectives
- **Advanced Shop Features**: Discounts, sales, special offers
- **Guild Economy**: Group purchasing and shared resources

**Technical Debt:**
- **Performance Optimization**: Further improve large shop rendering
- **Mobile Optimization**: Better mobile/tablet experience
- **Accessibility**: Screen reader and keyboard navigation
- **Localization**: Multi-language support preparation

**Balance Monitoring:**
- **Player Feedback**: Monitor progression rates and difficulty
- **Economic Analysis**: Track Gil flow and item popularity
- **Adjustment Tools**: Easy rebalancing of prices and rewards
- **A/B Testing**: Compare different balance approaches

VERSION COMPARISON SUMMARY
---------------------------
| Feature | Version 1.0 | Version 2.0 |
|---------|-------------|-------------|
| Currency | Gold/Silver/Copper | Gil (Simple) |
| Shop Items | ~50 items | 364+ items |
| Starting Money | Complex currency | 65 Gil |
| Price Format | Multi-currency objects | Single numbers |
| UI Experience | Basic shop | Advanced categorized shop |
| Balance | Untuned | Carefully balanced |
| Item Progression | Limited tiers | 5+ clear tiers |
| Economy | Confusing | Intuitive |

================================================================================
                                END OF DOCUMENTATION
================================================================================

This comprehensive documentation provides a complete technical specification
of the RPG Skill Tree system, enabling anyone (including AI assistants) to
understand, maintain, and extend the system effectively.

The system has evolved from a basic character management tool into a comprehensive 
RPG ecosystem with sophisticated economy, massive content catalog, and refined 
user experience. Version 2.0 represents a major milestone in usability, content 
scale, and economic design.
```

````
